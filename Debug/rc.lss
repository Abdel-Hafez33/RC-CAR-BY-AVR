
rc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010e  00800060  00002b16  00002baa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  0080016e  0080016e  00002cb8  2**0
                  ALLOC
  3 .stab         000033f0  00000000  00000000  00002cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002986  00000000  00000000  000060a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00008a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00008bce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00008dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000b1cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000c551  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d728  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000d8e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000dbde  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e54c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 5a 09 	jmp	0x12b4	; 0x12b4 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__vector_10>
      2c:	0c 94 f5 07 	jmp	0xfea	; 0xfea <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e1       	ldi	r30, 0x16	; 22
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 36       	cpi	r26, 0x6E	; 110
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e6       	ldi	r26, 0x6E	; 110
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 37       	cpi	r26, 0x79	; 121
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <main>
      8a:	0c 94 89 15 	jmp	0x2b12	; 0x2b12 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 52 15 	jmp	0x2aa4	; 0x2aa4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 6e 15 	jmp	0x2adc	; 0x2adc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 5e 15 	jmp	0x2abc	; 0x2abc <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 7a 15 	jmp	0x2af4	; 0x2af4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 5e 15 	jmp	0x2abc	; 0x2abc <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 7a 15 	jmp	0x2af4	; 0x2af4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 52 15 	jmp	0x2aa4	; 0x2aa4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 6e 15 	jmp	0x2adc	; 0x2adc <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 5e 15 	jmp	0x2abc	; 0x2abc <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 7a 15 	jmp	0x2af4	; 0x2af4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 5e 15 	jmp	0x2abc	; 0x2abc <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 7a 15 	jmp	0x2af4	; 0x2af4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 5e 15 	jmp	0x2abc	; 0x2abc <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 7a 15 	jmp	0x2af4	; 0x2af4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 62 15 	jmp	0x2ac4	; 0x2ac4 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 7e 15 	jmp	0x2afc	; 0x2afc <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(uint32 baud_rate)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <UART_init+0x6>
     e34:	00 d0       	rcall	.+0      	; 0xe36 <UART_init+0x8>
     e36:	00 d0       	rcall	.+0      	; 0xe38 <UART_init+0xa>
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	6b 83       	std	Y+3, r22	; 0x03
     e3e:	7c 83       	std	Y+4, r23	; 0x04
     e40:	8d 83       	std	Y+5, r24	; 0x05
     e42:	9e 83       	std	Y+6, r25	; 0x06
	uint16 ubrr_value = 0;
     e44:	1a 82       	std	Y+2, r1	; 0x02
     e46:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1 << U2X);
     e48:	eb e2       	ldi	r30, 0x2B	; 43
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	82 e0       	ldi	r24, 0x02	; 2
     e4e:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1 << RXEN) | (1 << TXEN);
     e50:	ea e2       	ldi	r30, 0x2A	; 42
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	88 e1       	ldi	r24, 0x18	; 24
     e56:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);
     e58:	e0 e4       	ldi	r30, 0x40	; 64
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	86 e8       	ldi	r24, 0x86	; 134
     e5e:	80 83       	st	Z, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16) (((F_CPU / (baud_rate * 8UL))) - 1);
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	9c 81       	ldd	r25, Y+4	; 0x04
     e64:	ad 81       	ldd	r26, Y+5	; 0x05
     e66:	be 81       	ldd	r27, Y+6	; 0x06
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	aa 1f       	adc	r26, r26
     e6e:	bb 1f       	adc	r27, r27
     e70:	88 0f       	add	r24, r24
     e72:	99 1f       	adc	r25, r25
     e74:	aa 1f       	adc	r26, r26
     e76:	bb 1f       	adc	r27, r27
     e78:	88 0f       	add	r24, r24
     e7a:	99 1f       	adc	r25, r25
     e7c:	aa 1f       	adc	r26, r26
     e7e:	bb 1f       	adc	r27, r27
     e80:	9c 01       	movw	r18, r24
     e82:	ad 01       	movw	r20, r26
     e84:	80 e0       	ldi	r24, 0x00	; 0
     e86:	92 e1       	ldi	r25, 0x12	; 18
     e88:	aa e7       	ldi	r26, 0x7A	; 122
     e8a:	b0 e0       	ldi	r27, 0x00	; 0
     e8c:	bc 01       	movw	r22, r24
     e8e:	cd 01       	movw	r24, r26
     e90:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__udivmodsi4>
     e94:	da 01       	movw	r26, r20
     e96:	c9 01       	movw	r24, r18
     e98:	01 97       	sbiw	r24, 0x01	; 1
     e9a:	9a 83       	std	Y+2, r25	; 0x02
     e9c:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value >> 8;
     e9e:	e0 e4       	ldi	r30, 0x40	; 64
     ea0:	f0 e0       	ldi	r31, 0x00	; 0
     ea2:	89 81       	ldd	r24, Y+1	; 0x01
     ea4:	9a 81       	ldd	r25, Y+2	; 0x02
     ea6:	89 2f       	mov	r24, r25
     ea8:	99 27       	eor	r25, r25
     eaa:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
     eac:	e9 e2       	ldi	r30, 0x29	; 41
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	80 83       	st	Z, r24
}
     eb4:	26 96       	adiw	r28, 0x06	; 6
     eb6:	0f b6       	in	r0, 0x3f	; 63
     eb8:	f8 94       	cli
     eba:	de bf       	out	0x3e, r29	; 62
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	cd bf       	out	0x3d, r28	; 61
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	0f 92       	push	r0
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while (BIT_IS_CLEAR(UCSRA, UDRE))
     ed2:	eb e2       	ldi	r30, 0x2B	; 43
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	88 2f       	mov	r24, r24
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	80 72       	andi	r24, 0x20	; 32
     ede:	90 70       	andi	r25, 0x00	; 0
     ee0:	00 97       	sbiw	r24, 0x00	; 0
     ee2:	b9 f3       	breq	.-18     	; 0xed2 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
     ee4:	ec e2       	ldi	r30, 0x2C	; 44
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	89 81       	ldd	r24, Y+1	; 0x01
     eea:	80 83       	st	Z, r24
	/************************* Another Method *************************
	 UDR = data;
	 while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	 SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
     eec:	0f 90       	pop	r0
     eee:	cf 91       	pop	r28
     ef0:	df 91       	pop	r29
     ef2:	08 95       	ret

00000ef4 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
     ef4:	df 93       	push	r29
     ef6:	cf 93       	push	r28
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while (BIT_IS_CLEAR(UCSRA, RXC))
     efc:	eb e2       	ldi	r30, 0x2B	; 43
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	80 81       	ld	r24, Z
     f02:	88 23       	and	r24, r24
     f04:	dc f7       	brge	.-10     	; 0xefc <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
     f06:	ec e2       	ldi	r30, 0x2C	; 44
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	80 81       	ld	r24, Z
}
     f0c:	cf 91       	pop	r28
     f0e:	df 91       	pop	r29
     f10:	08 95       	ret

00000f12 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
     f12:	df 93       	push	r29
     f14:	cf 93       	push	r28
     f16:	00 d0       	rcall	.+0      	; 0xf18 <UART_sendString+0x6>
     f18:	0f 92       	push	r0
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	9b 83       	std	Y+3, r25	; 0x03
     f20:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     f22:	19 82       	std	Y+1, r1	; 0x01
     f24:	0e c0       	rjmp	.+28     	; 0xf42 <UART_sendString+0x30>

	/* Send the whole string */
	while (Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	28 2f       	mov	r18, r24
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	9b 81       	ldd	r25, Y+3	; 0x03
     f30:	fc 01       	movw	r30, r24
     f32:	e2 0f       	add	r30, r18
     f34:	f3 1f       	adc	r31, r19
     f36:	80 81       	ld	r24, Z
     f38:	0e 94 63 07 	call	0xec6	; 0xec6 <UART_sendByte>
		i++;
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	8f 5f       	subi	r24, 0xFF	; 255
     f40:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while (Str[i] != '\0')
     f42:	89 81       	ldd	r24, Y+1	; 0x01
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	9b 81       	ldd	r25, Y+3	; 0x03
     f4c:	fc 01       	movw	r30, r24
     f4e:	e2 0f       	add	r30, r18
     f50:	f3 1f       	adc	r31, r19
     f52:	80 81       	ld	r24, Z
     f54:	88 23       	and	r24, r24
     f56:	39 f7       	brne	.-50     	; 0xf26 <UART_sendString+0x14>
	 {
	 UART_sendByte(*Str);
	 Str++;
	 }
	 *******************************************************************/
}
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	cf 91       	pop	r28
     f60:	df 91       	pop	r29
     f62:	08 95       	ret

00000f64 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
     f64:	0f 93       	push	r16
     f66:	1f 93       	push	r17
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	00 d0       	rcall	.+0      	; 0xf6e <UART_receiveString+0xa>
     f6e:	0f 92       	push	r0
     f70:	cd b7       	in	r28, 0x3d	; 61
     f72:	de b7       	in	r29, 0x3e	; 62
     f74:	9b 83       	std	Y+3, r25	; 0x03
     f76:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
     f78:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
     f7a:	89 81       	ldd	r24, Y+1	; 0x01
     f7c:	28 2f       	mov	r18, r24
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	8a 81       	ldd	r24, Y+2	; 0x02
     f82:	9b 81       	ldd	r25, Y+3	; 0x03
     f84:	8c 01       	movw	r16, r24
     f86:	02 0f       	add	r16, r18
     f88:	13 1f       	adc	r17, r19
     f8a:	0e 94 7a 07 	call	0xef4	; 0xef4 <UART_recieveByte>
     f8e:	f8 01       	movw	r30, r16
     f90:	80 83       	st	Z, r24
     f92:	0f c0       	rjmp	.+30     	; 0xfb2 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while (Str[i] != '#')
	{
		i++;
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	8f 5f       	subi	r24, 0xFF	; 255
     f98:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
     f9c:	28 2f       	mov	r18, r24
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	9b 81       	ldd	r25, Y+3	; 0x03
     fa4:	8c 01       	movw	r16, r24
     fa6:	02 0f       	add	r16, r18
     fa8:	13 1f       	adc	r17, r19
     faa:	0e 94 7a 07 	call	0xef4	; 0xef4 <UART_recieveByte>
     fae:	f8 01       	movw	r30, r16
     fb0:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while (Str[i] != '#')
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	8a 81       	ldd	r24, Y+2	; 0x02
     fba:	9b 81       	ldd	r25, Y+3	; 0x03
     fbc:	fc 01       	movw	r30, r24
     fbe:	e2 0f       	add	r30, r18
     fc0:	f3 1f       	adc	r31, r19
     fc2:	80 81       	ld	r24, Z
     fc4:	83 32       	cpi	r24, 0x23	; 35
     fc6:	31 f7       	brne	.-52     	; 0xf94 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	8a 81       	ldd	r24, Y+2	; 0x02
     fd0:	9b 81       	ldd	r25, Y+3	; 0x03
     fd2:	fc 01       	movw	r30, r24
     fd4:	e2 0f       	add	r30, r18
     fd6:	f3 1f       	adc	r31, r19
     fd8:	10 82       	st	Z, r1
}
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	1f 91       	pop	r17
     fe6:	0f 91       	pop	r16
     fe8:	08 95       	ret

00000fea <__vector_11>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
     fea:	1f 92       	push	r1
     fec:	0f 92       	push	r0
     fee:	0f b6       	in	r0, 0x3f	; 63
     ff0:	0f 92       	push	r0
     ff2:	11 24       	eor	r1, r1
     ff4:	2f 93       	push	r18
     ff6:	3f 93       	push	r19
     ff8:	4f 93       	push	r20
     ffa:	5f 93       	push	r21
     ffc:	6f 93       	push	r22
     ffe:	7f 93       	push	r23
    1000:	8f 93       	push	r24
    1002:	9f 93       	push	r25
    1004:	af 93       	push	r26
    1006:	bf 93       	push	r27
    1008:	ef 93       	push	r30
    100a:	ff 93       	push	r31
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR)
    1014:	80 91 6e 01 	lds	r24, 0x016E
    1018:	90 91 6f 01 	lds	r25, 0x016F
    101c:	00 97       	sbiw	r24, 0x00	; 0
    101e:	29 f0       	breq	.+10     	; 0x102a <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)();
    1020:	e0 91 6e 01 	lds	r30, 0x016E
    1024:	f0 91 6f 01 	lds	r31, 0x016F
    1028:	09 95       	icall
	}
}
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	ff 91       	pop	r31
    1030:	ef 91       	pop	r30
    1032:	bf 91       	pop	r27
    1034:	af 91       	pop	r26
    1036:	9f 91       	pop	r25
    1038:	8f 91       	pop	r24
    103a:	7f 91       	pop	r23
    103c:	6f 91       	pop	r22
    103e:	5f 91       	pop	r21
    1040:	4f 91       	pop	r20
    1042:	3f 91       	pop	r19
    1044:	2f 91       	pop	r18
    1046:	0f 90       	pop	r0
    1048:	0f be       	out	0x3f, r0	; 63
    104a:	0f 90       	pop	r0
    104c:	1f 90       	pop	r1
    104e:	18 95       	reti

00001050 <__vector_10>:

ISR(TIMER0_COMP_vect)
{
    1050:	1f 92       	push	r1
    1052:	0f 92       	push	r0
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	0f 92       	push	r0
    1058:	11 24       	eor	r1, r1
    105a:	2f 93       	push	r18
    105c:	3f 93       	push	r19
    105e:	4f 93       	push	r20
    1060:	5f 93       	push	r21
    1062:	6f 93       	push	r22
    1064:	7f 93       	push	r23
    1066:	8f 93       	push	r24
    1068:	9f 93       	push	r25
    106a:	af 93       	push	r26
    106c:	bf 93       	push	r27
    106e:	ef 93       	push	r30
    1070:	ff 93       	push	r31
    1072:	df 93       	push	r29
    1074:	cf 93       	push	r28
    1076:	cd b7       	in	r28, 0x3d	; 61
    1078:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR)
    107a:	80 91 6e 01 	lds	r24, 0x016E
    107e:	90 91 6f 01 	lds	r25, 0x016F
    1082:	00 97       	sbiw	r24, 0x00	; 0
    1084:	29 f0       	breq	.+10     	; 0x1090 <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)();
    1086:	e0 91 6e 01 	lds	r30, 0x016E
    108a:	f0 91 6f 01 	lds	r31, 0x016F
    108e:	09 95       	icall
	}
}
    1090:	cf 91       	pop	r28
    1092:	df 91       	pop	r29
    1094:	ff 91       	pop	r31
    1096:	ef 91       	pop	r30
    1098:	bf 91       	pop	r27
    109a:	af 91       	pop	r26
    109c:	9f 91       	pop	r25
    109e:	8f 91       	pop	r24
    10a0:	7f 91       	pop	r23
    10a2:	6f 91       	pop	r22
    10a4:	5f 91       	pop	r21
    10a6:	4f 91       	pop	r20
    10a8:	3f 91       	pop	r19
    10aa:	2f 91       	pop	r18
    10ac:	0f 90       	pop	r0
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	0f 90       	pop	r0
    10b2:	1f 90       	pop	r1
    10b4:	18 95       	reti

000010b6 <Timer0_init>:
/*
 * Description :
 * Function to initialize the Timer driver.
 */
void Timer0_init(const TIMER0_ConfigType *Config_Ptr)
{
    10b6:	df 93       	push	r29
    10b8:	cf 93       	push	r28
    10ba:	00 d0       	rcall	.+0      	; 0x10bc <Timer0_init+0x6>
    10bc:	cd b7       	in	r28, 0x3d	; 61
    10be:	de b7       	in	r29, 0x3e	; 62
    10c0:	9a 83       	std	Y+2, r25	; 0x02
    10c2:	89 83       	std	Y+1, r24	; 0x01
	 ***********************************************************************/

	/*
	 * insert the required mode in WGM bits (WGM00 and WGM01) of TCCR0 Register
	 */
	if (Config_Ptr->mode == NORMAL_MODE)
    10c4:	e9 81       	ldd	r30, Y+1	; 0x01
    10c6:	fa 81       	ldd	r31, Y+2	; 0x02
    10c8:	82 81       	ldd	r24, Z+2	; 0x02
    10ca:	88 23       	and	r24, r24
    10cc:	79 f4       	brne	.+30     	; 0x10ec <Timer0_init+0x36>
	{
		TCCR0_REG.Bits.FOC0_Bit = 1;
    10ce:	e3 e5       	ldi	r30, 0x53	; 83
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	80 68       	ori	r24, 0x80	; 128
    10d6:	80 83       	st	Z, r24
		TCCR0_REG.Bits.WGM00_Bit = 0;
    10d8:	e3 e5       	ldi	r30, 0x53	; 83
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	8f 7b       	andi	r24, 0xBF	; 191
    10e0:	80 83       	st	Z, r24
		TCCR0_REG.Bits.WGM01_Bit = 0;
    10e2:	e3 e5       	ldi	r30, 0x53	; 83
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	80 81       	ld	r24, Z
    10e8:	87 7f       	andi	r24, 0xF7	; 247
    10ea:	80 83       	st	Z, r24
	}
	if (Config_Ptr->mode == CTC_MODE)
    10ec:	e9 81       	ldd	r30, Y+1	; 0x01
    10ee:	fa 81       	ldd	r31, Y+2	; 0x02
    10f0:	82 81       	ldd	r24, Z+2	; 0x02
    10f2:	82 30       	cpi	r24, 0x02	; 2
    10f4:	79 f4       	brne	.+30     	; 0x1114 <Timer0_init+0x5e>
	{
		TCCR0_REG.Bits.FOC0_Bit = 1;
    10f6:	e3 e5       	ldi	r30, 0x53	; 83
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	80 68       	ori	r24, 0x80	; 128
    10fe:	80 83       	st	Z, r24
		TCCR0_REG.Bits.WGM00_Bit = 0;
    1100:	e3 e5       	ldi	r30, 0x53	; 83
    1102:	f0 e0       	ldi	r31, 0x00	; 0
    1104:	80 81       	ld	r24, Z
    1106:	8f 7b       	andi	r24, 0xBF	; 191
    1108:	80 83       	st	Z, r24
		TCCR0_REG.Bits.WGM01_Bit = 1;
    110a:	e3 e5       	ldi	r30, 0x53	; 83
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	88 60       	ori	r24, 0x08	; 8
    1112:	80 83       	st	Z, r24
	}
	if (Config_Ptr->mode == FAST_PWM_MODE)
    1114:	e9 81       	ldd	r30, Y+1	; 0x01
    1116:	fa 81       	ldd	r31, Y+2	; 0x02
    1118:	82 81       	ldd	r24, Z+2	; 0x02
    111a:	83 30       	cpi	r24, 0x03	; 3
    111c:	79 f4       	brne	.+30     	; 0x113c <Timer0_init+0x86>
	{
		TCCR0_REG.Bits.FOC0_Bit = 0;
    111e:	e3 e5       	ldi	r30, 0x53	; 83
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	8f 77       	andi	r24, 0x7F	; 127
    1126:	80 83       	st	Z, r24
		TCCR0_REG.Bits.WGM00_Bit = 1;
    1128:	e3 e5       	ldi	r30, 0x53	; 83
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	80 64       	ori	r24, 0x40	; 64
    1130:	80 83       	st	Z, r24
		TCCR0_REG.Bits.WGM01_Bit = 1;
    1132:	e3 e5       	ldi	r30, 0x53	; 83
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	88 60       	ori	r24, 0x08	; 8
    113a:	80 83       	st	Z, r24
	}

	/*
	 * insert the required compare output mode in COM bits (COM00 and COM01) of TCCR0 Register
	 */
	if (Config_Ptr->outputMode == NORMAL_MODE_OC0_DISCONNECTED)
    113c:	e9 81       	ldd	r30, Y+1	; 0x01
    113e:	fa 81       	ldd	r31, Y+2	; 0x02
    1140:	84 81       	ldd	r24, Z+4	; 0x04
    1142:	88 23       	and	r24, r24
    1144:	51 f4       	brne	.+20     	; 0x115a <Timer0_init+0xa4>
	{
		TCCR0_REG.Bits.COM00_Bit = 0;
    1146:	e3 e5       	ldi	r30, 0x53	; 83
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	8f 7e       	andi	r24, 0xEF	; 239
    114e:	80 83       	st	Z, r24
		TCCR0_REG.Bits.COM01_Bit = 0;
    1150:	e3 e5       	ldi	r30, 0x53	; 83
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	8f 7d       	andi	r24, 0xDF	; 223
    1158:	80 83       	st	Z, r24
	}
	if (Config_Ptr->outputMode == CTC_TOGGLE__PWM_RESERVED)
    115a:	e9 81       	ldd	r30, Y+1	; 0x01
    115c:	fa 81       	ldd	r31, Y+2	; 0x02
    115e:	84 81       	ldd	r24, Z+4	; 0x04
    1160:	81 30       	cpi	r24, 0x01	; 1
    1162:	51 f4       	brne	.+20     	; 0x1178 <Timer0_init+0xc2>
	{
		TCCR0_REG.Bits.COM00_Bit = 1;
    1164:	e3 e5       	ldi	r30, 0x53	; 83
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	80 81       	ld	r24, Z
    116a:	80 61       	ori	r24, 0x10	; 16
    116c:	80 83       	st	Z, r24
		TCCR0_REG.Bits.COM01_Bit = 0;
    116e:	e3 e5       	ldi	r30, 0x53	; 83
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	80 81       	ld	r24, Z
    1174:	8f 7d       	andi	r24, 0xDF	; 223
    1176:	80 83       	st	Z, r24
	}
	if (Config_Ptr->outputMode == CTC_CLEAR__PWM_NON_INVERTING)
    1178:	e9 81       	ldd	r30, Y+1	; 0x01
    117a:	fa 81       	ldd	r31, Y+2	; 0x02
    117c:	84 81       	ldd	r24, Z+4	; 0x04
    117e:	82 30       	cpi	r24, 0x02	; 2
    1180:	51 f4       	brne	.+20     	; 0x1196 <Timer0_init+0xe0>
	{
		TCCR0_REG.Bits.COM00_Bit = 0;
    1182:	e3 e5       	ldi	r30, 0x53	; 83
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	8f 7e       	andi	r24, 0xEF	; 239
    118a:	80 83       	st	Z, r24
		TCCR0_REG.Bits.COM01_Bit = 1;
    118c:	e3 e5       	ldi	r30, 0x53	; 83
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	80 62       	ori	r24, 0x20	; 32
    1194:	80 83       	st	Z, r24
	}
	if (Config_Ptr->outputMode == CTC_SET__PWM_INVERTING)
    1196:	e9 81       	ldd	r30, Y+1	; 0x01
    1198:	fa 81       	ldd	r31, Y+2	; 0x02
    119a:	84 81       	ldd	r24, Z+4	; 0x04
    119c:	83 30       	cpi	r24, 0x03	; 3
    119e:	51 f4       	brne	.+20     	; 0x11b4 <Timer0_init+0xfe>
	{
		TCCR0_REG.Bits.COM00_Bit = 1;
    11a0:	e3 e5       	ldi	r30, 0x53	; 83
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	80 61       	ori	r24, 0x10	; 16
    11a8:	80 83       	st	Z, r24
		TCCR0_REG.Bits.COM01_Bit = 1;
    11aa:	e3 e5       	ldi	r30, 0x53	; 83
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	80 62       	ori	r24, 0x20	; 32
    11b2:	80 83       	st	Z, r24
	}

	/*
	 * insert the required prescaler in CS bits (CS00, CS01 and CS02) of TCCR0 Register
	 */
	TCCR0_REG.Byte = (TCCR0_REG.Byte & 0xF8) | (Config_Ptr->prescaler);
    11b4:	a3 e5       	ldi	r26, 0x53	; 83
    11b6:	b0 e0       	ldi	r27, 0x00	; 0
    11b8:	e3 e5       	ldi	r30, 0x53	; 83
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	80 81       	ld	r24, Z
    11be:	98 2f       	mov	r25, r24
    11c0:	98 7f       	andi	r25, 0xF8	; 248
    11c2:	e9 81       	ldd	r30, Y+1	; 0x01
    11c4:	fa 81       	ldd	r31, Y+2	; 0x02
    11c6:	83 81       	ldd	r24, Z+3	; 0x03
    11c8:	89 2b       	or	r24, r25
    11ca:	8c 93       	st	X, r24

	TCNT0_REG = Config_Ptr->initial_value;
    11cc:	a2 e5       	ldi	r26, 0x52	; 82
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	e9 81       	ldd	r30, Y+1	; 0x01
    11d2:	fa 81       	ldd	r31, Y+2	; 0x02
    11d4:	80 81       	ld	r24, Z
    11d6:	8c 93       	st	X, r24
	OCR0_REG = Config_Ptr->compare_value;
    11d8:	ac e5       	ldi	r26, 0x5C	; 92
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e9 81       	ldd	r30, Y+1	; 0x01
    11de:	fa 81       	ldd	r31, Y+2	; 0x02
    11e0:	81 81       	ldd	r24, Z+1	; 0x01
    11e2:	8c 93       	st	X, r24

	/* Enable Timer/Counter0 Output Compare Match interrupt */
	TIMSK_REG.Bits.OCIE0_Bit = 1;
    11e4:	e9 e5       	ldi	r30, 0x59	; 89
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	80 81       	ld	r24, Z
    11ea:	82 60       	ori	r24, 0x02	; 2
    11ec:	80 83       	st	Z, r24

	/* Enable Timer/Counter0 Overflow Interrupt */
	TIMSK_REG.Bits.TOIE0_Bit = 1;
    11ee:	e9 e5       	ldi	r30, 0x59	; 89
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	81 60       	ori	r24, 0x01	; 1
    11f6:	80 83       	st	Z, r24
}
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <Timer0_deInit>:
/*
 * Description :
 * Function to disable the Timer0.
 */
void Timer0_deInit(void)
{
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR0_REG.Byte = 0;
    120a:	e3 e5       	ldi	r30, 0x53	; 83
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	10 82       	st	Z, r1
	TCNT0_REG = 0;
    1210:	e2 e5       	ldi	r30, 0x52	; 82
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	10 82       	st	Z, r1
	OCR0_REG = 0;
    1216:	ec e5       	ldi	r30, 0x5C	; 92
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	10 82       	st	Z, r1

	/* Disable the Output Compare A match and Overflow interrupt */
	TIMSK_REG.Bits.OCIE0_Bit = 0;
    121c:	e9 e5       	ldi	r30, 0x59	; 89
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	8d 7f       	andi	r24, 0xFD	; 253
    1224:	80 83       	st	Z, r24
	TIMSK_REG.Bits.TOIE0_Bit = 0;
    1226:	e9 e5       	ldi	r30, 0x59	; 89
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	80 81       	ld	r24, Z
    122c:	8e 7f       	andi	r24, 0xFE	; 254
    122e:	80 83       	st	Z, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    1230:	10 92 6f 01 	sts	0x016F, r1
    1234:	10 92 6e 01 	sts	0x016E, r1
}
    1238:	cf 91       	pop	r28
    123a:	df 91       	pop	r29
    123c:	08 95       	ret

0000123e <Timer0_setCallBack>:
/*
 * Description :
 * Function to set the Call Back function address.
 */
void Timer0_setCallBack(void (*a_ptr)(void))
{
    123e:	df 93       	push	r29
    1240:	cf 93       	push	r28
    1242:	00 d0       	rcall	.+0      	; 0x1244 <Timer0_setCallBack+0x6>
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	9a 83       	std	Y+2, r25	; 0x02
    124a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	9a 81       	ldd	r25, Y+2	; 0x02
    1250:	90 93 6f 01 	sts	0x016F, r25
    1254:	80 93 6e 01 	sts	0x016E, r24
}
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <Timer0_PWM_Start>:
/*
 * Description:
 * Setup the compare value based on the required input duty cycle.
 */
void Timer0_PWM_Start(uint8 a_dutyCycle)
{
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	0f 92       	push	r0
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	89 83       	std	Y+1, r24	; 0x01
	/* If the input duty cycle greater than 100, then set it to 100 */
	if (a_dutyCycle > 100)
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	85 36       	cpi	r24, 0x65	; 101
    1272:	10 f0       	brcs	.+4      	; 0x1278 <Timer0_PWM_Start+0x16>
	{
		a_dutyCycle = 100;
    1274:	84 e6       	ldi	r24, 0x64	; 100
    1276:	89 83       	std	Y+1, r24	; 0x01
	/* If the input duty cycle less than 0, then set it to 0 */
	if (a_dutyCycle < 0)
	{
		a_dutyCycle = 0;
	}
	OCR0_REG = (uint8) ((uint16) a_dutyCycle * OC0_MAX_VALUE / 100);
    1278:	ec e5       	ldi	r30, 0x5C	; 92
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	89 81       	ldd	r24, Y+1	; 0x01
    127e:	48 2f       	mov	r20, r24
    1280:	50 e0       	ldi	r21, 0x00	; 0
    1282:	ca 01       	movw	r24, r20
    1284:	9c 01       	movw	r18, r24
    1286:	22 0f       	add	r18, r18
    1288:	33 1f       	adc	r19, r19
    128a:	c9 01       	movw	r24, r18
    128c:	96 95       	lsr	r25
    128e:	98 2f       	mov	r25, r24
    1290:	88 27       	eor	r24, r24
    1292:	97 95       	ror	r25
    1294:	87 95       	ror	r24
    1296:	82 1b       	sub	r24, r18
    1298:	93 0b       	sbc	r25, r19
    129a:	84 0f       	add	r24, r20
    129c:	95 1f       	adc	r25, r21
    129e:	24 e6       	ldi	r18, 0x64	; 100
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	b9 01       	movw	r22, r18
    12a4:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <__udivmodhi4>
    12a8:	cb 01       	movw	r24, r22
    12aa:	80 83       	st	Z, r24
}
    12ac:	0f 90       	pop	r0
    12ae:	cf 91       	pop	r28
    12b0:	df 91       	pop	r29
    12b2:	08 95       	ret

000012b4 <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    12b4:	1f 92       	push	r1
    12b6:	0f 92       	push	r0
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	0f 92       	push	r0
    12bc:	11 24       	eor	r1, r1
    12be:	2f 93       	push	r18
    12c0:	3f 93       	push	r19
    12c2:	4f 93       	push	r20
    12c4:	5f 93       	push	r21
    12c6:	6f 93       	push	r22
    12c8:	7f 93       	push	r23
    12ca:	8f 93       	push	r24
    12cc:	9f 93       	push	r25
    12ce:	af 93       	push	r26
    12d0:	bf 93       	push	r27
    12d2:	ef 93       	push	r30
    12d4:	ff 93       	push	r31
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	cd b7       	in	r28, 0x3d	; 61
    12dc:	de b7       	in	r29, 0x3e	; 62
	if (g_callBackPtr != NULL_PTR)
    12de:	80 91 70 01 	lds	r24, 0x0170
    12e2:	90 91 71 01 	lds	r25, 0x0171
    12e6:	00 97       	sbiw	r24, 0x00	; 0
    12e8:	29 f0       	breq	.+10     	; 0x12f4 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    12ea:	e0 91 70 01 	lds	r30, 0x0170
    12ee:	f0 91 71 01 	lds	r31, 0x0171
    12f2:	09 95       	icall
	}
}
    12f4:	cf 91       	pop	r28
    12f6:	df 91       	pop	r29
    12f8:	ff 91       	pop	r31
    12fa:	ef 91       	pop	r30
    12fc:	bf 91       	pop	r27
    12fe:	af 91       	pop	r26
    1300:	9f 91       	pop	r25
    1302:	8f 91       	pop	r24
    1304:	7f 91       	pop	r23
    1306:	6f 91       	pop	r22
    1308:	5f 91       	pop	r21
    130a:	4f 91       	pop	r20
    130c:	3f 91       	pop	r19
    130e:	2f 91       	pop	r18
    1310:	0f 90       	pop	r0
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	0f 90       	pop	r0
    1316:	1f 90       	pop	r1
    1318:	18 95       	reti

0000131a <ICU_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void ICU_init(const ICU_ConfigType *Config_Ptr)
{
    131a:	df 93       	push	r29
    131c:	cf 93       	push	r28
    131e:	00 d0       	rcall	.+0      	; 0x1320 <ICU_init+0x6>
    1320:	cd b7       	in	r28, 0x3d	; 61
    1322:	de b7       	in	r29, 0x3e	; 62
    1324:	9a 83       	std	Y+2, r25	; 0x02
    1326:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DDRD_REG.Bits.PD6_Bit = 0;
    1328:	e1 e3       	ldi	r30, 0x31	; 49
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	80 81       	ld	r24, Z
    132e:	8f 7b       	andi	r24, 0xBF	; 191
    1330:	80 83       	st	Z, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A_REG.Bits.FOC1A_Bit = 1;
    1332:	ef e4       	ldi	r30, 0x4F	; 79
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	88 60       	ori	r24, 0x08	; 8
    133a:	80 83       	st	Z, r24
	TCCR1A_REG.Bits.FOC1B_Bit = 1;
    133c:	ef e4       	ldi	r30, 0x4F	; 79
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	84 60       	ori	r24, 0x04	; 4
    1344:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B_REG.Byte = (TCCR1B_REG.Byte & 0xF8) | (Config_Ptr->clock);
    1346:	ae e4       	ldi	r26, 0x4E	; 78
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	ee e4       	ldi	r30, 0x4E	; 78
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	98 2f       	mov	r25, r24
    1352:	98 7f       	andi	r25, 0xF8	; 248
    1354:	e9 81       	ldd	r30, Y+1	; 0x01
    1356:	fa 81       	ldd	r31, Y+2	; 0x02
    1358:	80 81       	ld	r24, Z
    135a:	89 2b       	or	r24, r25
    135c:	8c 93       	st	X, r24
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B_REG.Byte = (TCCR1B_REG.Byte & 0xBF) | ((Config_Ptr->edge) << 6);
    135e:	ae e4       	ldi	r26, 0x4E	; 78
    1360:	b0 e0       	ldi	r27, 0x00	; 0
    1362:	ee e4       	ldi	r30, 0x4E	; 78
    1364:	f0 e0       	ldi	r31, 0x00	; 0
    1366:	80 81       	ld	r24, Z
    1368:	28 2f       	mov	r18, r24
    136a:	2f 7b       	andi	r18, 0xBF	; 191
    136c:	e9 81       	ldd	r30, Y+1	; 0x01
    136e:	fa 81       	ldd	r31, Y+2	; 0x02
    1370:	81 81       	ldd	r24, Z+1	; 0x01
    1372:	88 2f       	mov	r24, r24
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	00 24       	eor	r0, r0
    1378:	96 95       	lsr	r25
    137a:	87 95       	ror	r24
    137c:	07 94       	ror	r0
    137e:	96 95       	lsr	r25
    1380:	87 95       	ror	r24
    1382:	07 94       	ror	r0
    1384:	98 2f       	mov	r25, r24
    1386:	80 2d       	mov	r24, r0
    1388:	82 2b       	or	r24, r18
    138a:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1_REG = 0;
    138c:	ec e4       	ldi	r30, 0x4C	; 76
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	11 82       	std	Z+1, r1	; 0x01
    1392:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1_REG = 0;
    1394:	e6 e4       	ldi	r30, 0x46	; 70
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	11 82       	std	Z+1, r1	; 0x01
    139a:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK_REG.Bits.TICIE1_Bit = 1;
    139c:	e9 e5       	ldi	r30, 0x59	; 89
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	80 62       	ori	r24, 0x20	; 32
    13a4:	80 83       	st	Z, r24
}
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	cf 91       	pop	r28
    13ac:	df 91       	pop	r29
    13ae:	08 95       	ret

000013b0 <ICU_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void ICU_setCallBack(void (*a_ptr)(void))
{
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	00 d0       	rcall	.+0      	; 0x13b6 <ICU_setCallBack+0x6>
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	9a 83       	std	Y+2, r25	; 0x02
    13bc:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    13be:	89 81       	ldd	r24, Y+1	; 0x01
    13c0:	9a 81       	ldd	r25, Y+2	; 0x02
    13c2:	90 93 71 01 	sts	0x0171, r25
    13c6:	80 93 70 01 	sts	0x0170, r24
}
    13ca:	0f 90       	pop	r0
    13cc:	0f 90       	pop	r0
    13ce:	cf 91       	pop	r28
    13d0:	df 91       	pop	r29
    13d2:	08 95       	ret

000013d4 <ICU_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
    13d4:	df 93       	push	r29
    13d6:	cf 93       	push	r28
    13d8:	0f 92       	push	r0
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B_REG.Byte = (TCCR1B_REG.Byte & 0xBF) | (a_edgeType << 6);
    13e0:	ae e4       	ldi	r26, 0x4E	; 78
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	ee e4       	ldi	r30, 0x4E	; 78
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	28 2f       	mov	r18, r24
    13ec:	2f 7b       	andi	r18, 0xBF	; 191
    13ee:	89 81       	ldd	r24, Y+1	; 0x01
    13f0:	88 2f       	mov	r24, r24
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	00 24       	eor	r0, r0
    13f6:	96 95       	lsr	r25
    13f8:	87 95       	ror	r24
    13fa:	07 94       	ror	r0
    13fc:	96 95       	lsr	r25
    13fe:	87 95       	ror	r24
    1400:	07 94       	ror	r0
    1402:	98 2f       	mov	r25, r24
    1404:	80 2d       	mov	r24, r0
    1406:	82 2b       	or	r24, r18
    1408:	8c 93       	st	X, r24
}
    140a:	0f 90       	pop	r0
    140c:	cf 91       	pop	r28
    140e:	df 91       	pop	r29
    1410:	08 95       	ret

00001412 <ICU_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 ICU_getInputCaptureValue(void)
{
    1412:	df 93       	push	r29
    1414:	cf 93       	push	r28
    1416:	cd b7       	in	r28, 0x3d	; 61
    1418:	de b7       	in	r29, 0x3e	; 62
	return ICR1_REG;
    141a:	e6 e4       	ldi	r30, 0x46	; 70
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	80 81       	ld	r24, Z
    1420:	91 81       	ldd	r25, Z+1	; 0x01
}
    1422:	cf 91       	pop	r28
    1424:	df 91       	pop	r29
    1426:	08 95       	ret

00001428 <ICU_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void ICU_clearTimerValue(void)
{
    1428:	df 93       	push	r29
    142a:	cf 93       	push	r28
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
	TCNT1_REG = 0;
    1430:	ec e4       	ldi	r30, 0x4C	; 76
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	11 82       	std	Z+1, r1	; 0x01
    1436:	10 82       	st	Z, r1
}
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	08 95       	ret

0000143e <ICU_deInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void ICU_deInit(void)
{
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1/ICU Registers */
	TCCR1A_REG.Byte = 0;
    1446:	ef e4       	ldi	r30, 0x4F	; 79
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	10 82       	st	Z, r1
	TCCR1B_REG.Byte = 0;
    144c:	ee e4       	ldi	r30, 0x4E	; 78
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	10 82       	st	Z, r1
	TCNT1_REG = 0;
    1452:	ec e4       	ldi	r30, 0x4C	; 76
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	11 82       	std	Z+1, r1	; 0x01
    1458:	10 82       	st	Z, r1
	ICR1_REG = 0;
    145a:	e6 e4       	ldi	r30, 0x46	; 70
    145c:	f0 e0       	ldi	r31, 0x00	; 0
    145e:	11 82       	std	Z+1, r1	; 0x01
    1460:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK_REG.Bits.TICIE1_Bit = 0;
    1462:	e9 e5       	ldi	r30, 0x59	; 89
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	8f 7d       	andi	r24, 0xDF	; 223
    146a:	80 83       	st	Z, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    146c:	10 92 71 01 	sts	0x0171, r1
    1470:	10 92 70 01 	sts	0x0170, r1
}
    1474:	cf 91       	pop	r28
    1476:	df 91       	pop	r29
    1478:	08 95       	ret

0000147a <GPIO_setupPinDirection>:
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num,
		GPIO_PinDirectionType direction)
{
    147a:	df 93       	push	r29
    147c:	cf 93       	push	r28
    147e:	00 d0       	rcall	.+0      	; 0x1480 <GPIO_setupPinDirection+0x6>
    1480:	00 d0       	rcall	.+0      	; 0x1482 <GPIO_setupPinDirection+0x8>
    1482:	0f 92       	push	r0
    1484:	cd b7       	in	r28, 0x3d	; 61
    1486:	de b7       	in	r29, 0x3e	; 62
    1488:	89 83       	std	Y+1, r24	; 0x01
    148a:	6a 83       	std	Y+2, r22	; 0x02
    148c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    148e:	8a 81       	ldd	r24, Y+2	; 0x02
    1490:	88 30       	cpi	r24, 0x08	; 8
    1492:	08 f0       	brcs	.+2      	; 0x1496 <GPIO_setupPinDirection+0x1c>
    1494:	d5 c0       	rjmp	.+426    	; 0x1640 <GPIO_setupPinDirection+0x1c6>
    1496:	89 81       	ldd	r24, Y+1	; 0x01
    1498:	84 30       	cpi	r24, 0x04	; 4
    149a:	08 f0       	brcs	.+2      	; 0x149e <GPIO_setupPinDirection+0x24>
    149c:	d1 c0       	rjmp	.+418    	; 0x1640 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch (port_num)
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	3d 83       	std	Y+5, r19	; 0x05
    14a6:	2c 83       	std	Y+4, r18	; 0x04
    14a8:	8c 81       	ldd	r24, Y+4	; 0x04
    14aa:	9d 81       	ldd	r25, Y+5	; 0x05
    14ac:	81 30       	cpi	r24, 0x01	; 1
    14ae:	91 05       	cpc	r25, r1
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <GPIO_setupPinDirection+0x3a>
    14b2:	43 c0       	rjmp	.+134    	; 0x153a <GPIO_setupPinDirection+0xc0>
    14b4:	2c 81       	ldd	r18, Y+4	; 0x04
    14b6:	3d 81       	ldd	r19, Y+5	; 0x05
    14b8:	22 30       	cpi	r18, 0x02	; 2
    14ba:	31 05       	cpc	r19, r1
    14bc:	2c f4       	brge	.+10     	; 0x14c8 <GPIO_setupPinDirection+0x4e>
    14be:	8c 81       	ldd	r24, Y+4	; 0x04
    14c0:	9d 81       	ldd	r25, Y+5	; 0x05
    14c2:	00 97       	sbiw	r24, 0x00	; 0
    14c4:	71 f0       	breq	.+28     	; 0x14e2 <GPIO_setupPinDirection+0x68>
    14c6:	bc c0       	rjmp	.+376    	; 0x1640 <GPIO_setupPinDirection+0x1c6>
    14c8:	2c 81       	ldd	r18, Y+4	; 0x04
    14ca:	3d 81       	ldd	r19, Y+5	; 0x05
    14cc:	22 30       	cpi	r18, 0x02	; 2
    14ce:	31 05       	cpc	r19, r1
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <GPIO_setupPinDirection+0x5a>
    14d2:	5f c0       	rjmp	.+190    	; 0x1592 <GPIO_setupPinDirection+0x118>
    14d4:	8c 81       	ldd	r24, Y+4	; 0x04
    14d6:	9d 81       	ldd	r25, Y+5	; 0x05
    14d8:	83 30       	cpi	r24, 0x03	; 3
    14da:	91 05       	cpc	r25, r1
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <GPIO_setupPinDirection+0x66>
    14de:	85 c0       	rjmp	.+266    	; 0x15ea <GPIO_setupPinDirection+0x170>
    14e0:	af c0       	rjmp	.+350    	; 0x1640 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if (direction == PIN_OUTPUT)
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	81 30       	cpi	r24, 0x01	; 1
    14e6:	a1 f4       	brne	.+40     	; 0x1510 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA_REG.Byte, pin_num);
    14e8:	aa e3       	ldi	r26, 0x3A	; 58
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	ea e3       	ldi	r30, 0x3A	; 58
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	48 2f       	mov	r20, r24
    14f4:	8a 81       	ldd	r24, Y+2	; 0x02
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	02 2e       	mov	r0, r18
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <GPIO_setupPinDirection+0x8c>
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	0a 94       	dec	r0
    1508:	e2 f7       	brpl	.-8      	; 0x1502 <GPIO_setupPinDirection+0x88>
    150a:	84 2b       	or	r24, r20
    150c:	8c 93       	st	X, r24
    150e:	98 c0       	rjmp	.+304    	; 0x1640 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA_REG.Byte, pin_num);
    1510:	aa e3       	ldi	r26, 0x3A	; 58
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	ea e3       	ldi	r30, 0x3A	; 58
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	48 2f       	mov	r20, r24
    151c:	8a 81       	ldd	r24, Y+2	; 0x02
    151e:	28 2f       	mov	r18, r24
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	81 e0       	ldi	r24, 0x01	; 1
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	02 2e       	mov	r0, r18
    1528:	02 c0       	rjmp	.+4      	; 0x152e <GPIO_setupPinDirection+0xb4>
    152a:	88 0f       	add	r24, r24
    152c:	99 1f       	adc	r25, r25
    152e:	0a 94       	dec	r0
    1530:	e2 f7       	brpl	.-8      	; 0x152a <GPIO_setupPinDirection+0xb0>
    1532:	80 95       	com	r24
    1534:	84 23       	and	r24, r20
    1536:	8c 93       	st	X, r24
    1538:	83 c0       	rjmp	.+262    	; 0x1640 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if (direction == PIN_OUTPUT)
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	81 30       	cpi	r24, 0x01	; 1
    153e:	a1 f4       	brne	.+40     	; 0x1568 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB_REG.Byte, pin_num);
    1540:	a7 e3       	ldi	r26, 0x37	; 55
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	e7 e3       	ldi	r30, 0x37	; 55
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	48 2f       	mov	r20, r24
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	81 e0       	ldi	r24, 0x01	; 1
    1554:	90 e0       	ldi	r25, 0x00	; 0
    1556:	02 2e       	mov	r0, r18
    1558:	02 c0       	rjmp	.+4      	; 0x155e <GPIO_setupPinDirection+0xe4>
    155a:	88 0f       	add	r24, r24
    155c:	99 1f       	adc	r25, r25
    155e:	0a 94       	dec	r0
    1560:	e2 f7       	brpl	.-8      	; 0x155a <GPIO_setupPinDirection+0xe0>
    1562:	84 2b       	or	r24, r20
    1564:	8c 93       	st	X, r24
    1566:	6c c0       	rjmp	.+216    	; 0x1640 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB_REG.Byte, pin_num);
    1568:	a7 e3       	ldi	r26, 0x37	; 55
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	e7 e3       	ldi	r30, 0x37	; 55
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	48 2f       	mov	r20, r24
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	02 2e       	mov	r0, r18
    1580:	02 c0       	rjmp	.+4      	; 0x1586 <GPIO_setupPinDirection+0x10c>
    1582:	88 0f       	add	r24, r24
    1584:	99 1f       	adc	r25, r25
    1586:	0a 94       	dec	r0
    1588:	e2 f7       	brpl	.-8      	; 0x1582 <GPIO_setupPinDirection+0x108>
    158a:	80 95       	com	r24
    158c:	84 23       	and	r24, r20
    158e:	8c 93       	st	X, r24
    1590:	57 c0       	rjmp	.+174    	; 0x1640 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if (direction == PIN_OUTPUT)
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	81 30       	cpi	r24, 0x01	; 1
    1596:	a1 f4       	brne	.+40     	; 0x15c0 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC_REG.Byte, pin_num);
    1598:	a4 e3       	ldi	r26, 0x34	; 52
    159a:	b0 e0       	ldi	r27, 0x00	; 0
    159c:	e4 e3       	ldi	r30, 0x34	; 52
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	48 2f       	mov	r20, r24
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	28 2f       	mov	r18, r24
    15a8:	30 e0       	ldi	r19, 0x00	; 0
    15aa:	81 e0       	ldi	r24, 0x01	; 1
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	02 2e       	mov	r0, r18
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <GPIO_setupPinDirection+0x13c>
    15b2:	88 0f       	add	r24, r24
    15b4:	99 1f       	adc	r25, r25
    15b6:	0a 94       	dec	r0
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <GPIO_setupPinDirection+0x138>
    15ba:	84 2b       	or	r24, r20
    15bc:	8c 93       	st	X, r24
    15be:	40 c0       	rjmp	.+128    	; 0x1640 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC_REG.Byte, pin_num);
    15c0:	a4 e3       	ldi	r26, 0x34	; 52
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e4 e3       	ldi	r30, 0x34	; 52
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	48 2f       	mov	r20, r24
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	28 2f       	mov	r18, r24
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	02 2e       	mov	r0, r18
    15d8:	02 c0       	rjmp	.+4      	; 0x15de <GPIO_setupPinDirection+0x164>
    15da:	88 0f       	add	r24, r24
    15dc:	99 1f       	adc	r25, r25
    15de:	0a 94       	dec	r0
    15e0:	e2 f7       	brpl	.-8      	; 0x15da <GPIO_setupPinDirection+0x160>
    15e2:	80 95       	com	r24
    15e4:	84 23       	and	r24, r20
    15e6:	8c 93       	st	X, r24
    15e8:	2b c0       	rjmp	.+86     	; 0x1640 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if (direction == PIN_OUTPUT)
    15ea:	8b 81       	ldd	r24, Y+3	; 0x03
    15ec:	81 30       	cpi	r24, 0x01	; 1
    15ee:	a1 f4       	brne	.+40     	; 0x1618 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD_REG.Byte, pin_num);
    15f0:	a1 e3       	ldi	r26, 0x31	; 49
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e1 e3       	ldi	r30, 0x31	; 49
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	48 2f       	mov	r20, r24
    15fc:	8a 81       	ldd	r24, Y+2	; 0x02
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	02 2e       	mov	r0, r18
    1608:	02 c0       	rjmp	.+4      	; 0x160e <GPIO_setupPinDirection+0x194>
    160a:	88 0f       	add	r24, r24
    160c:	99 1f       	adc	r25, r25
    160e:	0a 94       	dec	r0
    1610:	e2 f7       	brpl	.-8      	; 0x160a <GPIO_setupPinDirection+0x190>
    1612:	84 2b       	or	r24, r20
    1614:	8c 93       	st	X, r24
    1616:	14 c0       	rjmp	.+40     	; 0x1640 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD_REG.Byte, pin_num);
    1618:	a1 e3       	ldi	r26, 0x31	; 49
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	e1 e3       	ldi	r30, 0x31	; 49
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	48 2f       	mov	r20, r24
    1624:	8a 81       	ldd	r24, Y+2	; 0x02
    1626:	28 2f       	mov	r18, r24
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	81 e0       	ldi	r24, 0x01	; 1
    162c:	90 e0       	ldi	r25, 0x00	; 0
    162e:	02 2e       	mov	r0, r18
    1630:	02 c0       	rjmp	.+4      	; 0x1636 <GPIO_setupPinDirection+0x1bc>
    1632:	88 0f       	add	r24, r24
    1634:	99 1f       	adc	r25, r25
    1636:	0a 94       	dec	r0
    1638:	e2 f7       	brpl	.-8      	; 0x1632 <GPIO_setupPinDirection+0x1b8>
    163a:	80 95       	com	r24
    163c:	84 23       	and	r24, r20
    163e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1650:	df 93       	push	r29
    1652:	cf 93       	push	r28
    1654:	00 d0       	rcall	.+0      	; 0x1656 <GPIO_writePin+0x6>
    1656:	00 d0       	rcall	.+0      	; 0x1658 <GPIO_writePin+0x8>
    1658:	0f 92       	push	r0
    165a:	cd b7       	in	r28, 0x3d	; 61
    165c:	de b7       	in	r29, 0x3e	; 62
    165e:	89 83       	std	Y+1, r24	; 0x01
    1660:	6a 83       	std	Y+2, r22	; 0x02
    1662:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1664:	8a 81       	ldd	r24, Y+2	; 0x02
    1666:	88 30       	cpi	r24, 0x08	; 8
    1668:	08 f0       	brcs	.+2      	; 0x166c <GPIO_writePin+0x1c>
    166a:	d5 c0       	rjmp	.+426    	; 0x1816 <GPIO_writePin+0x1c6>
    166c:	89 81       	ldd	r24, Y+1	; 0x01
    166e:	84 30       	cpi	r24, 0x04	; 4
    1670:	08 f0       	brcs	.+2      	; 0x1674 <GPIO_writePin+0x24>
    1672:	d1 c0       	rjmp	.+418    	; 0x1816 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin value as required */
		switch (port_num)
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	28 2f       	mov	r18, r24
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	3d 83       	std	Y+5, r19	; 0x05
    167c:	2c 83       	std	Y+4, r18	; 0x04
    167e:	8c 81       	ldd	r24, Y+4	; 0x04
    1680:	9d 81       	ldd	r25, Y+5	; 0x05
    1682:	81 30       	cpi	r24, 0x01	; 1
    1684:	91 05       	cpc	r25, r1
    1686:	09 f4       	brne	.+2      	; 0x168a <GPIO_writePin+0x3a>
    1688:	43 c0       	rjmp	.+134    	; 0x1710 <GPIO_writePin+0xc0>
    168a:	2c 81       	ldd	r18, Y+4	; 0x04
    168c:	3d 81       	ldd	r19, Y+5	; 0x05
    168e:	22 30       	cpi	r18, 0x02	; 2
    1690:	31 05       	cpc	r19, r1
    1692:	2c f4       	brge	.+10     	; 0x169e <GPIO_writePin+0x4e>
    1694:	8c 81       	ldd	r24, Y+4	; 0x04
    1696:	9d 81       	ldd	r25, Y+5	; 0x05
    1698:	00 97       	sbiw	r24, 0x00	; 0
    169a:	71 f0       	breq	.+28     	; 0x16b8 <GPIO_writePin+0x68>
    169c:	bc c0       	rjmp	.+376    	; 0x1816 <GPIO_writePin+0x1c6>
    169e:	2c 81       	ldd	r18, Y+4	; 0x04
    16a0:	3d 81       	ldd	r19, Y+5	; 0x05
    16a2:	22 30       	cpi	r18, 0x02	; 2
    16a4:	31 05       	cpc	r19, r1
    16a6:	09 f4       	brne	.+2      	; 0x16aa <GPIO_writePin+0x5a>
    16a8:	5f c0       	rjmp	.+190    	; 0x1768 <GPIO_writePin+0x118>
    16aa:	8c 81       	ldd	r24, Y+4	; 0x04
    16ac:	9d 81       	ldd	r25, Y+5	; 0x05
    16ae:	83 30       	cpi	r24, 0x03	; 3
    16b0:	91 05       	cpc	r25, r1
    16b2:	09 f4       	brne	.+2      	; 0x16b6 <GPIO_writePin+0x66>
    16b4:	85 c0       	rjmp	.+266    	; 0x17c0 <GPIO_writePin+0x170>
    16b6:	af c0       	rjmp	.+350    	; 0x1816 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if (value == LOGIC_LOW)
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	88 23       	and	r24, r24
    16bc:	a9 f4       	brne	.+42     	; 0x16e8 <GPIO_writePin+0x98>
			{
				CLEAR_BIT(PORTA_REG.Byte, pin_num);
    16be:	ab e3       	ldi	r26, 0x3B	; 59
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	eb e3       	ldi	r30, 0x3B	; 59
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	48 2f       	mov	r20, r24
    16ca:	8a 81       	ldd	r24, Y+2	; 0x02
    16cc:	28 2f       	mov	r18, r24
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	90 e0       	ldi	r25, 0x00	; 0
    16d4:	02 2e       	mov	r0, r18
    16d6:	02 c0       	rjmp	.+4      	; 0x16dc <GPIO_writePin+0x8c>
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	0a 94       	dec	r0
    16de:	e2 f7       	brpl	.-8      	; 0x16d8 <GPIO_writePin+0x88>
    16e0:	80 95       	com	r24
    16e2:	84 23       	and	r24, r20
    16e4:	8c 93       	st	X, r24
    16e6:	97 c0       	rjmp	.+302    	; 0x1816 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTA_REG.Byte, pin_num);
    16e8:	ab e3       	ldi	r26, 0x3B	; 59
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	eb e3       	ldi	r30, 0x3B	; 59
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	48 2f       	mov	r20, r24
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	02 2e       	mov	r0, r18
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <GPIO_writePin+0xb6>
    1702:	88 0f       	add	r24, r24
    1704:	99 1f       	adc	r25, r25
    1706:	0a 94       	dec	r0
    1708:	e2 f7       	brpl	.-8      	; 0x1702 <GPIO_writePin+0xb2>
    170a:	84 2b       	or	r24, r20
    170c:	8c 93       	st	X, r24
    170e:	83 c0       	rjmp	.+262    	; 0x1816 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if (value == LOGIC_LOW)
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	88 23       	and	r24, r24
    1714:	a9 f4       	brne	.+42     	; 0x1740 <GPIO_writePin+0xf0>
			{
				CLEAR_BIT(PORTB_REG.Byte, pin_num);
    1716:	a8 e3       	ldi	r26, 0x38	; 56
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	e8 e3       	ldi	r30, 0x38	; 56
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	48 2f       	mov	r20, r24
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	02 2e       	mov	r0, r18
    172e:	02 c0       	rjmp	.+4      	; 0x1734 <GPIO_writePin+0xe4>
    1730:	88 0f       	add	r24, r24
    1732:	99 1f       	adc	r25, r25
    1734:	0a 94       	dec	r0
    1736:	e2 f7       	brpl	.-8      	; 0x1730 <GPIO_writePin+0xe0>
    1738:	80 95       	com	r24
    173a:	84 23       	and	r24, r20
    173c:	8c 93       	st	X, r24
    173e:	6b c0       	rjmp	.+214    	; 0x1816 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTB_REG.Byte, pin_num);
    1740:	a8 e3       	ldi	r26, 0x38	; 56
    1742:	b0 e0       	ldi	r27, 0x00	; 0
    1744:	e8 e3       	ldi	r30, 0x38	; 56
    1746:	f0 e0       	ldi	r31, 0x00	; 0
    1748:	80 81       	ld	r24, Z
    174a:	48 2f       	mov	r20, r24
    174c:	8a 81       	ldd	r24, Y+2	; 0x02
    174e:	28 2f       	mov	r18, r24
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	02 2e       	mov	r0, r18
    1758:	02 c0       	rjmp	.+4      	; 0x175e <GPIO_writePin+0x10e>
    175a:	88 0f       	add	r24, r24
    175c:	99 1f       	adc	r25, r25
    175e:	0a 94       	dec	r0
    1760:	e2 f7       	brpl	.-8      	; 0x175a <GPIO_writePin+0x10a>
    1762:	84 2b       	or	r24, r20
    1764:	8c 93       	st	X, r24
    1766:	57 c0       	rjmp	.+174    	; 0x1816 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if (value == LOGIC_LOW)
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	88 23       	and	r24, r24
    176c:	a9 f4       	brne	.+42     	; 0x1798 <GPIO_writePin+0x148>
			{
				CLEAR_BIT(PORTC_REG.Byte, pin_num);
    176e:	a5 e3       	ldi	r26, 0x35	; 53
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	e5 e3       	ldi	r30, 0x35	; 53
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	48 2f       	mov	r20, r24
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	02 2e       	mov	r0, r18
    1786:	02 c0       	rjmp	.+4      	; 0x178c <GPIO_writePin+0x13c>
    1788:	88 0f       	add	r24, r24
    178a:	99 1f       	adc	r25, r25
    178c:	0a 94       	dec	r0
    178e:	e2 f7       	brpl	.-8      	; 0x1788 <GPIO_writePin+0x138>
    1790:	80 95       	com	r24
    1792:	84 23       	and	r24, r20
    1794:	8c 93       	st	X, r24
    1796:	3f c0       	rjmp	.+126    	; 0x1816 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTC_REG.Byte, pin_num);
    1798:	a5 e3       	ldi	r26, 0x35	; 53
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	e5 e3       	ldi	r30, 0x35	; 53
    179e:	f0 e0       	ldi	r31, 0x00	; 0
    17a0:	80 81       	ld	r24, Z
    17a2:	48 2f       	mov	r20, r24
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	02 2e       	mov	r0, r18
    17b0:	02 c0       	rjmp	.+4      	; 0x17b6 <GPIO_writePin+0x166>
    17b2:	88 0f       	add	r24, r24
    17b4:	99 1f       	adc	r25, r25
    17b6:	0a 94       	dec	r0
    17b8:	e2 f7       	brpl	.-8      	; 0x17b2 <GPIO_writePin+0x162>
    17ba:	84 2b       	or	r24, r20
    17bc:	8c 93       	st	X, r24
    17be:	2b c0       	rjmp	.+86     	; 0x1816 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if (value == LOGIC_LOW)
    17c0:	8b 81       	ldd	r24, Y+3	; 0x03
    17c2:	88 23       	and	r24, r24
    17c4:	a9 f4       	brne	.+42     	; 0x17f0 <GPIO_writePin+0x1a0>
			{
				CLEAR_BIT(PORTD_REG.Byte, pin_num);
    17c6:	a2 e3       	ldi	r26, 0x32	; 50
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e2 e3       	ldi	r30, 0x32	; 50
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	48 2f       	mov	r20, r24
    17d2:	8a 81       	ldd	r24, Y+2	; 0x02
    17d4:	28 2f       	mov	r18, r24
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	02 2e       	mov	r0, r18
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <GPIO_writePin+0x194>
    17e0:	88 0f       	add	r24, r24
    17e2:	99 1f       	adc	r25, r25
    17e4:	0a 94       	dec	r0
    17e6:	e2 f7       	brpl	.-8      	; 0x17e0 <GPIO_writePin+0x190>
    17e8:	80 95       	com	r24
    17ea:	84 23       	and	r24, r20
    17ec:	8c 93       	st	X, r24
    17ee:	13 c0       	rjmp	.+38     	; 0x1816 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTD_REG.Byte, pin_num);
    17f0:	a2 e3       	ldi	r26, 0x32	; 50
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	e2 e3       	ldi	r30, 0x32	; 50
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	48 2f       	mov	r20, r24
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	02 2e       	mov	r0, r18
    1808:	02 c0       	rjmp	.+4      	; 0x180e <GPIO_writePin+0x1be>
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	0a 94       	dec	r0
    1810:	e2 f7       	brpl	.-8      	; 0x180a <GPIO_writePin+0x1ba>
    1812:	84 2b       	or	r24, r20
    1814:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	00 d0       	rcall	.+0      	; 0x182c <GPIO_readPin+0x6>
    182c:	00 d0       	rcall	.+0      	; 0x182e <GPIO_readPin+0x8>
    182e:	0f 92       	push	r0
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
    1834:	8a 83       	std	Y+2, r24	; 0x02
    1836:	6b 83       	std	Y+3, r22	; 0x03
	uint8 value = LOGIC_LOW;
    1838:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if ((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    183a:	8b 81       	ldd	r24, Y+3	; 0x03
    183c:	88 30       	cpi	r24, 0x08	; 8
    183e:	08 f0       	brcs	.+2      	; 0x1842 <GPIO_readPin+0x1c>
    1840:	84 c0       	rjmp	.+264    	; 0x194a <GPIO_readPin+0x124>
    1842:	8a 81       	ldd	r24, Y+2	; 0x02
    1844:	84 30       	cpi	r24, 0x04	; 4
    1846:	08 f0       	brcs	.+2      	; 0x184a <GPIO_readPin+0x24>
    1848:	80 c0       	rjmp	.+256    	; 0x194a <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Return the pin value */
		switch (port_num)
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	28 2f       	mov	r18, r24
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	3d 83       	std	Y+5, r19	; 0x05
    1852:	2c 83       	std	Y+4, r18	; 0x04
    1854:	4c 81       	ldd	r20, Y+4	; 0x04
    1856:	5d 81       	ldd	r21, Y+5	; 0x05
    1858:	41 30       	cpi	r20, 0x01	; 1
    185a:	51 05       	cpc	r21, r1
    185c:	79 f1       	breq	.+94     	; 0x18bc <GPIO_readPin+0x96>
    185e:	8c 81       	ldd	r24, Y+4	; 0x04
    1860:	9d 81       	ldd	r25, Y+5	; 0x05
    1862:	82 30       	cpi	r24, 0x02	; 2
    1864:	91 05       	cpc	r25, r1
    1866:	34 f4       	brge	.+12     	; 0x1874 <GPIO_readPin+0x4e>
    1868:	2c 81       	ldd	r18, Y+4	; 0x04
    186a:	3d 81       	ldd	r19, Y+5	; 0x05
    186c:	21 15       	cp	r18, r1
    186e:	31 05       	cpc	r19, r1
    1870:	69 f0       	breq	.+26     	; 0x188c <GPIO_readPin+0x66>
    1872:	6b c0       	rjmp	.+214    	; 0x194a <GPIO_readPin+0x124>
    1874:	4c 81       	ldd	r20, Y+4	; 0x04
    1876:	5d 81       	ldd	r21, Y+5	; 0x05
    1878:	42 30       	cpi	r20, 0x02	; 2
    187a:	51 05       	cpc	r21, r1
    187c:	b9 f1       	breq	.+110    	; 0x18ec <GPIO_readPin+0xc6>
    187e:	8c 81       	ldd	r24, Y+4	; 0x04
    1880:	9d 81       	ldd	r25, Y+5	; 0x05
    1882:	83 30       	cpi	r24, 0x03	; 3
    1884:	91 05       	cpc	r25, r1
    1886:	09 f4       	brne	.+2      	; 0x188a <GPIO_readPin+0x64>
    1888:	49 c0       	rjmp	.+146    	; 0x191c <GPIO_readPin+0xf6>
    188a:	5f c0       	rjmp	.+190    	; 0x194a <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if (BIT_IS_SET(PINA_REG.Byte, pin_num))
    188c:	e9 e3       	ldi	r30, 0x39	; 57
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	28 2f       	mov	r18, r24
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	8b 81       	ldd	r24, Y+3	; 0x03
    1898:	88 2f       	mov	r24, r24
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	a9 01       	movw	r20, r18
    189e:	02 c0       	rjmp	.+4      	; 0x18a4 <GPIO_readPin+0x7e>
    18a0:	55 95       	asr	r21
    18a2:	47 95       	ror	r20
    18a4:	8a 95       	dec	r24
    18a6:	e2 f7       	brpl	.-8      	; 0x18a0 <GPIO_readPin+0x7a>
    18a8:	ca 01       	movw	r24, r20
    18aa:	81 70       	andi	r24, 0x01	; 1
    18ac:	90 70       	andi	r25, 0x00	; 0
    18ae:	88 23       	and	r24, r24
    18b0:	19 f0       	breq	.+6      	; 0x18b8 <GPIO_readPin+0x92>
			{
				value = LOGIC_HIGH;
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	89 83       	std	Y+1, r24	; 0x01
    18b6:	49 c0       	rjmp	.+146    	; 0x194a <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    18b8:	19 82       	std	Y+1, r1	; 0x01
    18ba:	47 c0       	rjmp	.+142    	; 0x194a <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if (BIT_IS_SET(PINB_REG.Byte, pin_num))
    18bc:	e6 e3       	ldi	r30, 0x36	; 54
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	28 2f       	mov	r18, r24
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	8b 81       	ldd	r24, Y+3	; 0x03
    18c8:	88 2f       	mov	r24, r24
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	a9 01       	movw	r20, r18
    18ce:	02 c0       	rjmp	.+4      	; 0x18d4 <GPIO_readPin+0xae>
    18d0:	55 95       	asr	r21
    18d2:	47 95       	ror	r20
    18d4:	8a 95       	dec	r24
    18d6:	e2 f7       	brpl	.-8      	; 0x18d0 <GPIO_readPin+0xaa>
    18d8:	ca 01       	movw	r24, r20
    18da:	81 70       	andi	r24, 0x01	; 1
    18dc:	90 70       	andi	r25, 0x00	; 0
    18de:	88 23       	and	r24, r24
    18e0:	19 f0       	breq	.+6      	; 0x18e8 <GPIO_readPin+0xc2>
			{
				value = LOGIC_HIGH;
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	89 83       	std	Y+1, r24	; 0x01
    18e6:	31 c0       	rjmp	.+98     	; 0x194a <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    18e8:	19 82       	std	Y+1, r1	; 0x01
    18ea:	2f c0       	rjmp	.+94     	; 0x194a <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if (BIT_IS_SET(PINC_REG.Byte, pin_num))
    18ec:	e3 e3       	ldi	r30, 0x33	; 51
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	28 2f       	mov	r18, r24
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	8b 81       	ldd	r24, Y+3	; 0x03
    18f8:	88 2f       	mov	r24, r24
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	a9 01       	movw	r20, r18
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <GPIO_readPin+0xde>
    1900:	55 95       	asr	r21
    1902:	47 95       	ror	r20
    1904:	8a 95       	dec	r24
    1906:	e2 f7       	brpl	.-8      	; 0x1900 <GPIO_readPin+0xda>
    1908:	ca 01       	movw	r24, r20
    190a:	81 70       	andi	r24, 0x01	; 1
    190c:	90 70       	andi	r25, 0x00	; 0
    190e:	88 23       	and	r24, r24
    1910:	19 f0       	breq	.+6      	; 0x1918 <GPIO_readPin+0xf2>
			{
				value = LOGIC_HIGH;
    1912:	81 e0       	ldi	r24, 0x01	; 1
    1914:	89 83       	std	Y+1, r24	; 0x01
    1916:	19 c0       	rjmp	.+50     	; 0x194a <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    1918:	19 82       	std	Y+1, r1	; 0x01
    191a:	17 c0       	rjmp	.+46     	; 0x194a <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if (BIT_IS_SET(PIND_REG.Byte, pin_num))
    191c:	e0 e3       	ldi	r30, 0x30	; 48
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	8b 81       	ldd	r24, Y+3	; 0x03
    1928:	88 2f       	mov	r24, r24
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	a9 01       	movw	r20, r18
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <GPIO_readPin+0x10e>
    1930:	55 95       	asr	r21
    1932:	47 95       	ror	r20
    1934:	8a 95       	dec	r24
    1936:	e2 f7       	brpl	.-8      	; 0x1930 <GPIO_readPin+0x10a>
    1938:	ca 01       	movw	r24, r20
    193a:	81 70       	andi	r24, 0x01	; 1
    193c:	90 70       	andi	r25, 0x00	; 0
    193e:	88 23       	and	r24, r24
    1940:	19 f0       	breq	.+6      	; 0x1948 <GPIO_readPin+0x122>
			{
				value = LOGIC_HIGH;
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	89 83       	std	Y+1, r24	; 0x01
    1946:	01 c0       	rjmp	.+2      	; 0x194a <GPIO_readPin+0x124>
			}
			else
			{
				value = LOGIC_LOW;
    1948:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}
	return value;
    194a:	89 81       	ldd	r24, Y+1	; 0x01
}
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	cf 91       	pop	r28
    1958:	df 91       	pop	r29
    195a:	08 95       	ret

0000195c <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    195c:	df 93       	push	r29
    195e:	cf 93       	push	r28
    1960:	00 d0       	rcall	.+0      	; 0x1962 <GPIO_setupPortDirection+0x6>
    1962:	00 d0       	rcall	.+0      	; 0x1964 <GPIO_setupPortDirection+0x8>
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
    1968:	89 83       	std	Y+1, r24	; 0x01
    196a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS)
    196c:	89 81       	ldd	r24, Y+1	; 0x01
    196e:	84 30       	cpi	r24, 0x04	; 4
    1970:	90 f5       	brcc	.+100    	; 0x19d6 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch (port_num)
    1972:	89 81       	ldd	r24, Y+1	; 0x01
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	3c 83       	std	Y+4, r19	; 0x04
    197a:	2b 83       	std	Y+3, r18	; 0x03
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	9c 81       	ldd	r25, Y+4	; 0x04
    1980:	81 30       	cpi	r24, 0x01	; 1
    1982:	91 05       	cpc	r25, r1
    1984:	d1 f0       	breq	.+52     	; 0x19ba <GPIO_setupPortDirection+0x5e>
    1986:	2b 81       	ldd	r18, Y+3	; 0x03
    1988:	3c 81       	ldd	r19, Y+4	; 0x04
    198a:	22 30       	cpi	r18, 0x02	; 2
    198c:	31 05       	cpc	r19, r1
    198e:	2c f4       	brge	.+10     	; 0x199a <GPIO_setupPortDirection+0x3e>
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	9c 81       	ldd	r25, Y+4	; 0x04
    1994:	00 97       	sbiw	r24, 0x00	; 0
    1996:	61 f0       	breq	.+24     	; 0x19b0 <GPIO_setupPortDirection+0x54>
    1998:	1e c0       	rjmp	.+60     	; 0x19d6 <GPIO_setupPortDirection+0x7a>
    199a:	2b 81       	ldd	r18, Y+3	; 0x03
    199c:	3c 81       	ldd	r19, Y+4	; 0x04
    199e:	22 30       	cpi	r18, 0x02	; 2
    19a0:	31 05       	cpc	r19, r1
    19a2:	81 f0       	breq	.+32     	; 0x19c4 <GPIO_setupPortDirection+0x68>
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	9c 81       	ldd	r25, Y+4	; 0x04
    19a8:	83 30       	cpi	r24, 0x03	; 3
    19aa:	91 05       	cpc	r25, r1
    19ac:	81 f0       	breq	.+32     	; 0x19ce <GPIO_setupPortDirection+0x72>
    19ae:	13 c0       	rjmp	.+38     	; 0x19d6 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA_REG.Byte = direction;
    19b0:	ea e3       	ldi	r30, 0x3A	; 58
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	80 83       	st	Z, r24
    19b8:	0e c0       	rjmp	.+28     	; 0x19d6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB_REG.Byte = direction;
    19ba:	e7 e3       	ldi	r30, 0x37	; 55
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	80 83       	st	Z, r24
    19c2:	09 c0       	rjmp	.+18     	; 0x19d6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC_REG.Byte = direction;
    19c4:	e4 e3       	ldi	r30, 0x34	; 52
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ca:	80 83       	st	Z, r24
    19cc:	04 c0       	rjmp	.+8      	; 0x19d6 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD_REG.Byte = direction;
    19ce:	e1 e3       	ldi	r30, 0x31	; 49
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	8a 81       	ldd	r24, Y+2	; 0x02
    19d4:	80 83       	st	Z, r24
			break;
		}
	}
}
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	cf 91       	pop	r28
    19e0:	df 91       	pop	r29
    19e2:	08 95       	ret

000019e4 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    19e4:	df 93       	push	r29
    19e6:	cf 93       	push	r28
    19e8:	00 d0       	rcall	.+0      	; 0x19ea <GPIO_writePort+0x6>
    19ea:	00 d0       	rcall	.+0      	; 0x19ec <GPIO_writePort+0x8>
    19ec:	cd b7       	in	r28, 0x3d	; 61
    19ee:	de b7       	in	r29, 0x3e	; 62
    19f0:	89 83       	std	Y+1, r24	; 0x01
    19f2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS)
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	84 30       	cpi	r24, 0x04	; 4
    19f8:	90 f5       	brcc	.+100    	; 0x1a5e <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port value as required */
		switch (port_num)
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	28 2f       	mov	r18, r24
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	3c 83       	std	Y+4, r19	; 0x04
    1a02:	2b 83       	std	Y+3, r18	; 0x03
    1a04:	8b 81       	ldd	r24, Y+3	; 0x03
    1a06:	9c 81       	ldd	r25, Y+4	; 0x04
    1a08:	81 30       	cpi	r24, 0x01	; 1
    1a0a:	91 05       	cpc	r25, r1
    1a0c:	d1 f0       	breq	.+52     	; 0x1a42 <GPIO_writePort+0x5e>
    1a0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a10:	3c 81       	ldd	r19, Y+4	; 0x04
    1a12:	22 30       	cpi	r18, 0x02	; 2
    1a14:	31 05       	cpc	r19, r1
    1a16:	2c f4       	brge	.+10     	; 0x1a22 <GPIO_writePort+0x3e>
    1a18:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1c:	00 97       	sbiw	r24, 0x00	; 0
    1a1e:	61 f0       	breq	.+24     	; 0x1a38 <GPIO_writePort+0x54>
    1a20:	1e c0       	rjmp	.+60     	; 0x1a5e <GPIO_writePort+0x7a>
    1a22:	2b 81       	ldd	r18, Y+3	; 0x03
    1a24:	3c 81       	ldd	r19, Y+4	; 0x04
    1a26:	22 30       	cpi	r18, 0x02	; 2
    1a28:	31 05       	cpc	r19, r1
    1a2a:	81 f0       	breq	.+32     	; 0x1a4c <GPIO_writePort+0x68>
    1a2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a30:	83 30       	cpi	r24, 0x03	; 3
    1a32:	91 05       	cpc	r25, r1
    1a34:	81 f0       	breq	.+32     	; 0x1a56 <GPIO_writePort+0x72>
    1a36:	13 c0       	rjmp	.+38     	; 0x1a5e <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA_REG.Byte = value;
    1a38:	eb e3       	ldi	r30, 0x3B	; 59
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	80 83       	st	Z, r24
    1a40:	0e c0       	rjmp	.+28     	; 0x1a5e <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB_REG.Byte = value;
    1a42:	e8 e3       	ldi	r30, 0x38	; 56
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	8a 81       	ldd	r24, Y+2	; 0x02
    1a48:	80 83       	st	Z, r24
    1a4a:	09 c0       	rjmp	.+18     	; 0x1a5e <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC_REG.Byte = value;
    1a4c:	e5 e3       	ldi	r30, 0x35	; 53
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	8a 81       	ldd	r24, Y+2	; 0x02
    1a52:	80 83       	st	Z, r24
    1a54:	04 c0       	rjmp	.+8      	; 0x1a5e <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD_REG.Byte = value;
    1a56:	e2 e3       	ldi	r30, 0x32	; 50
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5c:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	0f 90       	pop	r0
    1a66:	cf 91       	pop	r28
    1a68:	df 91       	pop	r29
    1a6a:	08 95       	ret

00001a6c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1a6c:	df 93       	push	r29
    1a6e:	cf 93       	push	r28
    1a70:	00 d0       	rcall	.+0      	; 0x1a72 <GPIO_readPort+0x6>
    1a72:	00 d0       	rcall	.+0      	; 0x1a74 <GPIO_readPort+0x8>
    1a74:	0f 92       	push	r0
    1a76:	cd b7       	in	r28, 0x3d	; 61
    1a78:	de b7       	in	r29, 0x3e	; 62
    1a7a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1a7c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if (port_num >= NUM_OF_PORTS)
    1a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a80:	84 30       	cpi	r24, 0x04	; 4
    1a82:	10 f0       	brcs	.+4      	; 0x1a88 <GPIO_readPort+0x1c>
	{
		return 0;
    1a84:	1d 82       	std	Y+5, r1	; 0x05
    1a86:	34 c0       	rjmp	.+104    	; 0x1af0 <GPIO_readPort+0x84>
	}
	else
	{
		/* Return the pin value */
		switch (port_num)
    1a88:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8a:	28 2f       	mov	r18, r24
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	3c 83       	std	Y+4, r19	; 0x04
    1a90:	2b 83       	std	Y+3, r18	; 0x03
    1a92:	8b 81       	ldd	r24, Y+3	; 0x03
    1a94:	9c 81       	ldd	r25, Y+4	; 0x04
    1a96:	81 30       	cpi	r24, 0x01	; 1
    1a98:	91 05       	cpc	r25, r1
    1a9a:	d1 f0       	breq	.+52     	; 0x1ad0 <GPIO_readPort+0x64>
    1a9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a9e:	3c 81       	ldd	r19, Y+4	; 0x04
    1aa0:	22 30       	cpi	r18, 0x02	; 2
    1aa2:	31 05       	cpc	r19, r1
    1aa4:	2c f4       	brge	.+10     	; 0x1ab0 <GPIO_readPort+0x44>
    1aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aaa:	00 97       	sbiw	r24, 0x00	; 0
    1aac:	61 f0       	breq	.+24     	; 0x1ac6 <GPIO_readPort+0x5a>
    1aae:	1e c0       	rjmp	.+60     	; 0x1aec <GPIO_readPort+0x80>
    1ab0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ab2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ab4:	22 30       	cpi	r18, 0x02	; 2
    1ab6:	31 05       	cpc	r19, r1
    1ab8:	81 f0       	breq	.+32     	; 0x1ada <GPIO_readPort+0x6e>
    1aba:	8b 81       	ldd	r24, Y+3	; 0x03
    1abc:	9c 81       	ldd	r25, Y+4	; 0x04
    1abe:	83 30       	cpi	r24, 0x03	; 3
    1ac0:	91 05       	cpc	r25, r1
    1ac2:	81 f0       	breq	.+32     	; 0x1ae4 <GPIO_readPort+0x78>
    1ac4:	13 c0       	rjmp	.+38     	; 0x1aec <GPIO_readPort+0x80>
		{
		case PORTA_ID:
			value = PINA_REG.Byte;
    1ac6:	e9 e3       	ldi	r30, 0x39	; 57
    1ac8:	f0 e0       	ldi	r31, 0x00	; 0
    1aca:	80 81       	ld	r24, Z
    1acc:	89 83       	std	Y+1, r24	; 0x01
    1ace:	0e c0       	rjmp	.+28     	; 0x1aec <GPIO_readPort+0x80>
			break;
		case PORTB_ID:
			value = PINB_REG.Byte;
    1ad0:	e6 e3       	ldi	r30, 0x36	; 54
    1ad2:	f0 e0       	ldi	r31, 0x00	; 0
    1ad4:	80 81       	ld	r24, Z
    1ad6:	89 83       	std	Y+1, r24	; 0x01
    1ad8:	09 c0       	rjmp	.+18     	; 0x1aec <GPIO_readPort+0x80>
			break;
		case PORTC_ID:
			value = PINC_REG.Byte;
    1ada:	e3 e3       	ldi	r30, 0x33	; 51
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	89 83       	std	Y+1, r24	; 0x01
    1ae2:	04 c0       	rjmp	.+8      	; 0x1aec <GPIO_readPort+0x80>
			break;
		case PORTD_ID:
			value = PIND_REG.Byte;
    1ae4:	e0 e3       	ldi	r30, 0x30	; 48
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	80 81       	ld	r24, Z
    1aea:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return value;
    1aec:	99 81       	ldd	r25, Y+1	; 0x01
    1aee:	9d 83       	std	Y+5, r25	; 0x05
    1af0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1af2:	0f 90       	pop	r0
    1af4:	0f 90       	pop	r0
    1af6:	0f 90       	pop	r0
    1af8:	0f 90       	pop	r0
    1afa:	0f 90       	pop	r0
    1afc:	cf 91       	pop	r28
    1afe:	df 91       	pop	r29
    1b00:	08 95       	ret

00001b02 <Ultrasonic_init>:
 * 1. Initialize the ICU driver as required.
 * 2. Setup the ICU call back function.
 * 3. Setup the direction for the trigger pin as output pin through the GPIO driver.
 */
void Ultrasonic_init(void)
{
    1b02:	df 93       	push	r29
    1b04:	cf 93       	push	r28
    1b06:	00 d0       	rcall	.+0      	; 0x1b08 <Ultrasonic_init+0x6>
    1b08:	cd b7       	in	r28, 0x3d	; 61
    1b0a:	de b7       	in	r29, 0x3e	; 62
	/* Setup the trigger pin direction as output */
	GPIO_setupPinDirection(TRIGGER_PORT_ID, TRIGGER_PIN_ID, PIN_OUTPUT);
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	65 e0       	ldi	r22, 0x05	; 5
    1b10:	41 e0       	ldi	r20, 0x01	; 1
    1b12:	0e 94 3d 0a 	call	0x147a	; 0x147a <GPIO_setupPinDirection>

	/* Configuration type of ICU with F_CPU/8 and raising edge  */
	ICU_ConfigType ICU_config =
		{F_CPU_8, RAISING};
    1b16:	82 e0       	ldi	r24, 0x02	; 2
    1b18:	89 83       	std	Y+1, r24	; 0x01
    1b1a:	81 e0       	ldi	r24, 0x01	; 1
    1b1c:	8a 83       	std	Y+2, r24	; 0x02

	/* Call the initialization function */
	ICU_init(&ICU_config);
    1b1e:	ce 01       	movw	r24, r28
    1b20:	01 96       	adiw	r24, 0x01	; 1
    1b22:	0e 94 8d 09 	call	0x131a	; 0x131a <ICU_init>

	/* Setup the call back function which be handled each interrupt */
	ICU_setCallBack(Ultrasonic_edgeProcessing);
    1b26:	84 ea       	ldi	r24, 0xA4	; 164
    1b28:	9e e0       	ldi	r25, 0x0E	; 14
    1b2a:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <ICU_setCallBack>
}
    1b2e:	0f 90       	pop	r0
    1b30:	0f 90       	pop	r0
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	08 95       	ret

00001b38 <Ultrasonic_Trigger>:
/*
 * Description :
 * Send the Trigger pulse to the ultrasonic.
 */
void Ultrasonic_Trigger(void)
{
    1b38:	df 93       	push	r29
    1b3a:	cf 93       	push	r28
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
    1b40:	68 97       	sbiw	r28, 0x18	; 24
    1b42:	0f b6       	in	r0, 0x3f	; 63
    1b44:	f8 94       	cli
    1b46:	de bf       	out	0x3e, r29	; 62
    1b48:	0f be       	out	0x3f, r0	; 63
    1b4a:	cd bf       	out	0x3d, r28	; 61
	/*  Transmit trigger pulse of at least 10 us to the HC-SR04 Trig Pin */
	GPIO_writePin(TRIGGER_PORT_ID, TRIGGER_PIN_ID, LOGIC_HIGH);
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	65 e0       	ldi	r22, 0x05	; 5
    1b50:	41 e0       	ldi	r20, 0x01	; 1
    1b52:	0e 94 28 0b 	call	0x1650	; 0x1650 <GPIO_writePin>
    1b56:	80 e0       	ldi	r24, 0x00	; 0
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	a0 ea       	ldi	r26, 0xA0	; 160
    1b5c:	b1 e4       	ldi	r27, 0x41	; 65
    1b5e:	8d 8b       	std	Y+21, r24	; 0x15
    1b60:	9e 8b       	std	Y+22, r25	; 0x16
    1b62:	af 8b       	std	Y+23, r26	; 0x17
    1b64:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1b66:	6d 89       	ldd	r22, Y+21	; 0x15
    1b68:	7e 89       	ldd	r23, Y+22	; 0x16
    1b6a:	8f 89       	ldd	r24, Y+23	; 0x17
    1b6c:	98 8d       	ldd	r25, Y+24	; 0x18
    1b6e:	2b ea       	ldi	r18, 0xAB	; 171
    1b70:	3a ea       	ldi	r19, 0xAA	; 170
    1b72:	4a e2       	ldi	r20, 0x2A	; 42
    1b74:	50 e4       	ldi	r21, 0x40	; 64
    1b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	89 8b       	std	Y+17, r24	; 0x11
    1b80:	9a 8b       	std	Y+18, r25	; 0x12
    1b82:	ab 8b       	std	Y+19, r26	; 0x13
    1b84:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1b86:	69 89       	ldd	r22, Y+17	; 0x11
    1b88:	7a 89       	ldd	r23, Y+18	; 0x12
    1b8a:	8b 89       	ldd	r24, Y+19	; 0x13
    1b8c:	9c 89       	ldd	r25, Y+20	; 0x14
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	40 e8       	ldi	r20, 0x80	; 128
    1b94:	5f e3       	ldi	r21, 0x3F	; 63
    1b96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b9a:	88 23       	and	r24, r24
    1b9c:	1c f4       	brge	.+6      	; 0x1ba4 <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	88 8b       	std	Y+16, r24	; 0x10
    1ba2:	91 c0       	rjmp	.+290    	; 0x1cc6 <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    1ba4:	69 89       	ldd	r22, Y+17	; 0x11
    1ba6:	7a 89       	ldd	r23, Y+18	; 0x12
    1ba8:	8b 89       	ldd	r24, Y+19	; 0x13
    1baa:	9c 89       	ldd	r25, Y+20	; 0x14
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	4f e7       	ldi	r20, 0x7F	; 127
    1bb2:	53 e4       	ldi	r21, 0x43	; 67
    1bb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bb8:	18 16       	cp	r1, r24
    1bba:	0c f0       	brlt	.+2      	; 0x1bbe <Ultrasonic_Trigger+0x86>
    1bbc:	7b c0       	rjmp	.+246    	; 0x1cb4 <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1bbe:	6d 89       	ldd	r22, Y+21	; 0x15
    1bc0:	7e 89       	ldd	r23, Y+22	; 0x16
    1bc2:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc4:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	4a e7       	ldi	r20, 0x7A	; 122
    1bcc:	54 e4       	ldi	r21, 0x44	; 68
    1bce:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	8c 87       	std	Y+12, r24	; 0x0c
    1bd8:	9d 87       	std	Y+13, r25	; 0x0d
    1bda:	ae 87       	std	Y+14, r26	; 0x0e
    1bdc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bde:	6c 85       	ldd	r22, Y+12	; 0x0c
    1be0:	7d 85       	ldd	r23, Y+13	; 0x0d
    1be2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1be4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	4a ef       	ldi	r20, 0xFA	; 250
    1bec:	54 e4       	ldi	r21, 0x44	; 68
    1bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	88 87       	std	Y+8, r24	; 0x08
    1bf8:	99 87       	std	Y+9, r25	; 0x09
    1bfa:	aa 87       	std	Y+10, r26	; 0x0a
    1bfc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1bfe:	68 85       	ldd	r22, Y+8	; 0x08
    1c00:	79 85       	ldd	r23, Y+9	; 0x09
    1c02:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c04:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	40 e8       	ldi	r20, 0x80	; 128
    1c0c:	5f e3       	ldi	r21, 0x3F	; 63
    1c0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c12:	88 23       	and	r24, r24
    1c14:	2c f4       	brge	.+10     	; 0x1c20 <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    1c16:	81 e0       	ldi	r24, 0x01	; 1
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	9f 83       	std	Y+7, r25	; 0x07
    1c1c:	8e 83       	std	Y+6, r24	; 0x06
    1c1e:	3f c0       	rjmp	.+126    	; 0x1c9e <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    1c20:	68 85       	ldd	r22, Y+8	; 0x08
    1c22:	79 85       	ldd	r23, Y+9	; 0x09
    1c24:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c26:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	3f ef       	ldi	r19, 0xFF	; 255
    1c2c:	4f e7       	ldi	r20, 0x7F	; 127
    1c2e:	57 e4       	ldi	r21, 0x47	; 71
    1c30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c34:	18 16       	cp	r1, r24
    1c36:	4c f5       	brge	.+82     	; 0x1c8a <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c38:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c3a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c3c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c3e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	40 e2       	ldi	r20, 0x20	; 32
    1c46:	51 e4       	ldi	r21, 0x41	; 65
    1c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c4c:	dc 01       	movw	r26, r24
    1c4e:	cb 01       	movw	r24, r22
    1c50:	bc 01       	movw	r22, r24
    1c52:	cd 01       	movw	r24, r26
    1c54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	9f 83       	std	Y+7, r25	; 0x07
    1c5e:	8e 83       	std	Y+6, r24	; 0x06
    1c60:	0f c0       	rjmp	.+30     	; 0x1c80 <Ultrasonic_Trigger+0x148>
    1c62:	88 ec       	ldi	r24, 0xC8	; 200
    1c64:	90 e0       	ldi	r25, 0x00	; 0
    1c66:	9d 83       	std	Y+5, r25	; 0x05
    1c68:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c6e:	01 97       	sbiw	r24, 0x01	; 1
    1c70:	f1 f7       	brne	.-4      	; 0x1c6e <Ultrasonic_Trigger+0x136>
    1c72:	9d 83       	std	Y+5, r25	; 0x05
    1c74:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c76:	8e 81       	ldd	r24, Y+6	; 0x06
    1c78:	9f 81       	ldd	r25, Y+7	; 0x07
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	9f 83       	std	Y+7, r25	; 0x07
    1c7e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c80:	8e 81       	ldd	r24, Y+6	; 0x06
    1c82:	9f 81       	ldd	r25, Y+7	; 0x07
    1c84:	00 97       	sbiw	r24, 0x00	; 0
    1c86:	69 f7       	brne	.-38     	; 0x1c62 <Ultrasonic_Trigger+0x12a>
    1c88:	24 c0       	rjmp	.+72     	; 0x1cd2 <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c8a:	68 85       	ldd	r22, Y+8	; 0x08
    1c8c:	79 85       	ldd	r23, Y+9	; 0x09
    1c8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c90:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c96:	dc 01       	movw	r26, r24
    1c98:	cb 01       	movw	r24, r22
    1c9a:	9f 83       	std	Y+7, r25	; 0x07
    1c9c:	8e 83       	std	Y+6, r24	; 0x06
    1c9e:	8e 81       	ldd	r24, Y+6	; 0x06
    1ca0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ca2:	9b 83       	std	Y+3, r25	; 0x03
    1ca4:	8a 83       	std	Y+2, r24	; 0x02
    1ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca8:	9b 81       	ldd	r25, Y+3	; 0x03
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	f1 f7       	brne	.-4      	; 0x1caa <Ultrasonic_Trigger+0x172>
    1cae:	9b 83       	std	Y+3, r25	; 0x03
    1cb0:	8a 83       	std	Y+2, r24	; 0x02
    1cb2:	0f c0       	rjmp	.+30     	; 0x1cd2 <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cb4:	69 89       	ldd	r22, Y+17	; 0x11
    1cb6:	7a 89       	ldd	r23, Y+18	; 0x12
    1cb8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cba:	9c 89       	ldd	r25, Y+20	; 0x14
    1cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	88 8b       	std	Y+16, r24	; 0x10
    1cc6:	88 89       	ldd	r24, Y+16	; 0x10
    1cc8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
    1ccc:	8a 95       	dec	r24
    1cce:	f1 f7       	brne	.-4      	; 0x1ccc <Ultrasonic_Trigger+0x194>
    1cd0:	89 83       	std	Y+1, r24	; 0x01
	/* 20 us to ensure that the trigger pulse has been sent successfully */
	_delay_us(TRIGGER_DELAY_VALUE);
	GPIO_writePin(TRIGGER_PORT_ID, TRIGGER_PIN_ID, LOGIC_LOW);
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	65 e0       	ldi	r22, 0x05	; 5
    1cd6:	40 e0       	ldi	r20, 0x00	; 0
    1cd8:	0e 94 28 0b 	call	0x1650	; 0x1650 <GPIO_writePin>
}
    1cdc:	68 96       	adiw	r28, 0x18	; 24
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	f8 94       	cli
    1ce2:	de bf       	out	0x3e, r29	; 62
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	cd bf       	out	0x3d, r28	; 61
    1ce8:	cf 91       	pop	r28
    1cea:	df 91       	pop	r29
    1cec:	08 95       	ret

00001cee <Ultrasonic_readDistance>:
 * Description :
 * 1. Send the trigger pulse by using Ultrasonic_Trigger function.
 * 2. Start the measurements by the ICU from this moment.
 */
uint16 Ultrasonic_readDistance(void)
{
    1cee:	df 93       	push	r29
    1cf0:	cf 93       	push	r28
    1cf2:	00 d0       	rcall	.+0      	; 0x1cf4 <Ultrasonic_readDistance+0x6>
    1cf4:	cd b7       	in	r28, 0x3d	; 61
    1cf6:	de b7       	in	r29, 0x3e	; 62
	uint16 distance;
	/* Send the trigger pulse to HC-SR04 Trig Pin */
	Ultrasonic_Trigger();
    1cf8:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <Ultrasonic_Trigger>
	 * The distance of Object (in cm) = (340000*echoTime)/2 = 17000 * echoTime
	 * F_CPU/8 for timer frequency.
	 * Then time to execute 1 instruction is 1 us.
	 * Distance = 17000 x (echoTime) x 1 x 10^-6 cm = 0.017 x (echoTime) cm = (echoTime) / 58.8 cm
	 */
	distance = g_echoTime / 58.8;
    1cfc:	80 91 73 01 	lds	r24, 0x0173
    1d00:	90 91 74 01 	lds	r25, 0x0174
    1d04:	cc 01       	movw	r24, r24
    1d06:	a0 e0       	ldi	r26, 0x00	; 0
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	bc 01       	movw	r22, r24
    1d0c:	cd 01       	movw	r24, r26
    1d0e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1d12:	dc 01       	movw	r26, r24
    1d14:	cb 01       	movw	r24, r22
    1d16:	bc 01       	movw	r22, r24
    1d18:	cd 01       	movw	r24, r26
    1d1a:	23 e3       	ldi	r18, 0x33	; 51
    1d1c:	33 e3       	ldi	r19, 0x33	; 51
    1d1e:	4b e6       	ldi	r20, 0x6B	; 107
    1d20:	52 e4       	ldi	r21, 0x42	; 66
    1d22:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	bc 01       	movw	r22, r24
    1d2c:	cd 01       	movw	r24, r26
    1d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	9a 83       	std	Y+2, r25	; 0x02
    1d38:	89 83       	std	Y+1, r24	; 0x01
	return distance;
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
    1d3c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	08 95       	ret

00001d48 <Ultrasonic_edgeProcessing>:
 * Description :
 * 1. This is the call back function called by the ICU driver.
 * 2. This is used to calculate the high time (pulse time) generated by the ultrasonic sensor.
 */
void Ultrasonic_edgeProcessing(void)
{
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
	g_edgeCount++;
    1d50:	80 91 72 01 	lds	r24, 0x0172
    1d54:	8f 5f       	subi	r24, 0xFF	; 255
    1d56:	80 93 72 01 	sts	0x0172, r24
	if (g_edgeCount == 1)
    1d5a:	80 91 72 01 	lds	r24, 0x0172
    1d5e:	81 30       	cpi	r24, 0x01	; 1
    1d60:	31 f4       	brne	.+12     	; 0x1d6e <Ultrasonic_edgeProcessing+0x26>
	{
		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		ICU_clearTimerValue();
    1d62:	0e 94 14 0a 	call	0x1428	; 0x1428 <ICU_clearTimerValue>
		/* Detect falling edge */
		ICU_setEdgeDetectionType(FALLING);
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <ICU_setEdgeDetectionType>
    1d6c:	0f c0       	rjmp	.+30     	; 0x1d8c <Ultrasonic_edgeProcessing+0x44>
	}
	else if (g_edgeCount == 2)
    1d6e:	80 91 72 01 	lds	r24, 0x0172
    1d72:	82 30       	cpi	r24, 0x02	; 2
    1d74:	59 f4       	brne	.+22     	; 0x1d8c <Ultrasonic_edgeProcessing+0x44>
	{
		/* Store the High time value */
		g_echoTime = ICU_getInputCaptureValue();
    1d76:	0e 94 09 0a 	call	0x1412	; 0x1412 <ICU_getInputCaptureValue>
    1d7a:	90 93 74 01 	sts	0x0174, r25
    1d7e:	80 93 73 01 	sts	0x0173, r24
		/* Detect rising edge */
		ICU_setEdgeDetectionType(RAISING);
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <ICU_setEdgeDetectionType>
		/* For the next distance measurements operation */
		g_edgeCount = 0;
    1d88:	10 92 72 01 	sts	0x0172, r1
	}
}
    1d8c:	cf 91       	pop	r28
    1d8e:	df 91       	pop	r29
    1d90:	08 95       	ret

00001d92 <Move_Backward>:
/*
 * Description :
 * The Function responsible for moving the car forward.
 */
void Move_Backward()
{
    1d92:	df 93       	push	r29
    1d94:	cf 93       	push	r28
    1d96:	cd b7       	in	r28, 0x3d	; 61
    1d98:	de b7       	in	r29, 0x3e	; 62
	DcMotor1_Rotate(CLOCK_Wise);
    1d9a:	82 e0       	ldi	r24, 0x02	; 2
    1d9c:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <DcMotor1_Rotate>
	DcMotor2_Rotate(ANTI_CLOCK_WISE);
    1da0:	81 e0       	ldi	r24, 0x01	; 1
    1da2:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <DcMotor2_Rotate>
}
    1da6:	cf 91       	pop	r28
    1da8:	df 91       	pop	r29
    1daa:	08 95       	ret

00001dac <Move_Forward>:
/*
 * Description :
 * The Function responsible for moving the car backward.
 */
void Move_Forward()
{
    1dac:	df 93       	push	r29
    1dae:	cf 93       	push	r28
    1db0:	cd b7       	in	r28, 0x3d	; 61
    1db2:	de b7       	in	r29, 0x3e	; 62

	DcMotor1_Rotate(ANTI_CLOCK_WISE);
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <DcMotor1_Rotate>
	DcMotor2_Rotate(CLOCK_Wise);
    1dba:	82 e0       	ldi	r24, 0x02	; 2
    1dbc:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <DcMotor2_Rotate>
}
    1dc0:	cf 91       	pop	r28
    1dc2:	df 91       	pop	r29
    1dc4:	08 95       	ret

00001dc6 <Move_Left>:
/*
 * Description :
 * The Function responsible for moving the car right.
 */
void Move_Left()
{
    1dc6:	df 93       	push	r29
    1dc8:	cf 93       	push	r28
    1dca:	cd b7       	in	r28, 0x3d	; 61
    1dcc:	de b7       	in	r29, 0x3e	; 62
	DcMotor1_Rotate(CLOCK_Wise);
    1dce:	82 e0       	ldi	r24, 0x02	; 2
    1dd0:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <DcMotor1_Rotate>
	DcMotor2_Rotate(CLOCK_Wise);
    1dd4:	82 e0       	ldi	r24, 0x02	; 2
    1dd6:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <DcMotor2_Rotate>
}
    1dda:	cf 91       	pop	r28
    1ddc:	df 91       	pop	r29
    1dde:	08 95       	ret

00001de0 <Move_Right>:
/*
 * Description :
 * The Function responsible for moving the car left.
 */
void Move_Right()
{
    1de0:	df 93       	push	r29
    1de2:	cf 93       	push	r28
    1de4:	cd b7       	in	r28, 0x3d	; 61
    1de6:	de b7       	in	r29, 0x3e	; 62
	DcMotor1_Rotate(ANTI_CLOCK_WISE);
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <DcMotor1_Rotate>
	DcMotor2_Rotate(ANTI_CLOCK_WISE);
    1dee:	81 e0       	ldi	r24, 0x01	; 1
    1df0:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <DcMotor2_Rotate>
}
    1df4:	cf 91       	pop	r28
    1df6:	df 91       	pop	r29
    1df8:	08 95       	ret

00001dfa <stop>:
/*
 * Description :
 * The Function responsible for stop the car.
 */
void stop()
{
    1dfa:	df 93       	push	r29
    1dfc:	cf 93       	push	r28
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
	DcMotor1_Rotate(STOP);
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <DcMotor1_Rotate>
	DcMotor2_Rotate(STOP);
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    1e0a:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <DcMotor2_Rotate>
}
    1e0e:	cf 91       	pop	r28
    1e10:	df 91       	pop	r29
    1e12:	08 95       	ret

00001e14 <Set_Speed>:
/*
 * Description :
 * The Function responsible for setting the car speed.
 */
void Set_Speed(uint8 speed)
{
    1e14:	df 93       	push	r29
    1e16:	cf 93       	push	r28
    1e18:	0f 92       	push	r0
    1e1a:	cd b7       	in	r28, 0x3d	; 61
    1e1c:	de b7       	in	r29, 0x3e	; 62
    1e1e:	89 83       	std	Y+1, r24	; 0x01
	Timer0_PWM_Start(speed);
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
    1e22:	0e 94 31 09 	call	0x1262	; 0x1262 <Timer0_PWM_Start>
}
    1e26:	0f 90       	pop	r0
    1e28:	cf 91       	pop	r28
    1e2a:	df 91       	pop	r29
    1e2c:	08 95       	ret

00001e2e <DcMotor_Init>:
 * Description :
 * 1. The Function responsible for setup the direction for the two motor pins through the GPIO driver.
 * 2. Stop at the DC-Motor at the beginning through the GPIO driver.
 */
void DcMotor_Init(void)
{
    1e2e:	df 93       	push	r29
    1e30:	cf 93       	push	r28
    1e32:	cd b7       	in	r28, 0x3d	; 61
    1e34:	de b7       	in	r29, 0x3e	; 62
    1e36:	2a 97       	sbiw	r28, 0x0a	; 10
    1e38:	0f b6       	in	r0, 0x3f	; 63
    1e3a:	f8 94       	cli
    1e3c:	de bf       	out	0x3e, r29	; 62
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	cd bf       	out	0x3d, r28	; 61
	/* Make The Configuration Of Timer0 To Be in FAST PWM Mode */
	TIMER0_ConfigType TIMER0_CONFIG =
	{ 0, 0, FAST_PWM_MODE, PRESCALER_64, CTC_CLEAR__PWM_NON_INVERTING };
    1e42:	ce 01       	movw	r24, r28
    1e44:	01 96       	adiw	r24, 0x01	; 1
    1e46:	9f 83       	std	Y+7, r25	; 0x07
    1e48:	8e 83       	std	Y+6, r24	; 0x06
    1e4a:	e8 e6       	ldi	r30, 0x68	; 104
    1e4c:	f1 e0       	ldi	r31, 0x01	; 1
    1e4e:	f9 87       	std	Y+9, r31	; 0x09
    1e50:	e8 87       	std	Y+8, r30	; 0x08
    1e52:	f5 e0       	ldi	r31, 0x05	; 5
    1e54:	fa 87       	std	Y+10, r31	; 0x0a
    1e56:	e8 85       	ldd	r30, Y+8	; 0x08
    1e58:	f9 85       	ldd	r31, Y+9	; 0x09
    1e5a:	00 80       	ld	r0, Z
    1e5c:	88 85       	ldd	r24, Y+8	; 0x08
    1e5e:	99 85       	ldd	r25, Y+9	; 0x09
    1e60:	01 96       	adiw	r24, 0x01	; 1
    1e62:	99 87       	std	Y+9, r25	; 0x09
    1e64:	88 87       	std	Y+8, r24	; 0x08
    1e66:	ee 81       	ldd	r30, Y+6	; 0x06
    1e68:	ff 81       	ldd	r31, Y+7	; 0x07
    1e6a:	00 82       	st	Z, r0
    1e6c:	8e 81       	ldd	r24, Y+6	; 0x06
    1e6e:	9f 81       	ldd	r25, Y+7	; 0x07
    1e70:	01 96       	adiw	r24, 0x01	; 1
    1e72:	9f 83       	std	Y+7, r25	; 0x07
    1e74:	8e 83       	std	Y+6, r24	; 0x06
    1e76:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e78:	91 50       	subi	r25, 0x01	; 1
    1e7a:	9a 87       	std	Y+10, r25	; 0x0a
    1e7c:	ea 85       	ldd	r30, Y+10	; 0x0a
    1e7e:	ee 23       	and	r30, r30
    1e80:	51 f7       	brne	.-44     	; 0x1e56 <DcMotor_Init+0x28>

	/* Init Timer0 in FAST PWM Mode */
	Timer0_init(&TIMER0_CONFIG);
    1e82:	ce 01       	movw	r24, r28
    1e84:	01 96       	adiw	r24, 0x01	; 1
    1e86:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <Timer0_init>

	/* Set OC0 pin direction as output */
	GPIO_setupPinDirection(OC0_PORTID, OC0_PINID, PIN_OUTPUT);
    1e8a:	81 e0       	ldi	r24, 0x01	; 1
    1e8c:	63 e0       	ldi	r22, 0x03	; 3
    1e8e:	41 e0       	ldi	r20, 0x01	; 1
    1e90:	0e 94 3d 0a 	call	0x147a	; 0x147a <GPIO_setupPinDirection>

	/* Set IN1 and IN2 motor 1 pins direction as output */
	GPIO_setupPinDirection(MOTOR1_PORTID, MOTOR1_IN1_PINID, PIN_OUTPUT);
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	64 e0       	ldi	r22, 0x04	; 4
    1e98:	41 e0       	ldi	r20, 0x01	; 1
    1e9a:	0e 94 3d 0a 	call	0x147a	; 0x147a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR1_PORTID, MOTOR1_IN2_PINID, PIN_OUTPUT);
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	60 e0       	ldi	r22, 0x00	; 0
    1ea2:	41 e0       	ldi	r20, 0x01	; 1
    1ea4:	0e 94 3d 0a 	call	0x147a	; 0x147a <GPIO_setupPinDirection>

	/* Set IN1 and IN2 motor 2 pins direction as output */
	GPIO_setupPinDirection(MOTOR2_PORTID, MOTOR2_IN1_PINID, PIN_OUTPUT);
    1ea8:	81 e0       	ldi	r24, 0x01	; 1
    1eaa:	66 e0       	ldi	r22, 0x06	; 6
    1eac:	41 e0       	ldi	r20, 0x01	; 1
    1eae:	0e 94 3d 0a 	call	0x147a	; 0x147a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(MOTOR2_PORTID, MOTOR2_IN2_PINID, PIN_OUTPUT);
    1eb2:	81 e0       	ldi	r24, 0x01	; 1
    1eb4:	67 e0       	ldi	r22, 0x07	; 7
    1eb6:	41 e0       	ldi	r20, 0x01	; 1
    1eb8:	0e 94 3d 0a 	call	0x147a	; 0x147a <GPIO_setupPinDirection>

	/* Stop motor 1 as initial state */
	GPIO_writePin(MOTOR1_PORTID, MOTOR1_IN1_PINID, LOGIC_LOW);
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	64 e0       	ldi	r22, 0x04	; 4
    1ec0:	40 e0       	ldi	r20, 0x00	; 0
    1ec2:	0e 94 28 0b 	call	0x1650	; 0x1650 <GPIO_writePin>
	GPIO_writePin(MOTOR1_PORTID, MOTOR1_IN2_PINID, LOGIC_LOW);
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	60 e0       	ldi	r22, 0x00	; 0
    1eca:	40 e0       	ldi	r20, 0x00	; 0
    1ecc:	0e 94 28 0b 	call	0x1650	; 0x1650 <GPIO_writePin>

	/* Stop motor 2 as initial state */
	GPIO_writePin(MOTOR2_PORTID, MOTOR2_IN1_PINID, LOGIC_LOW);
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	66 e0       	ldi	r22, 0x06	; 6
    1ed4:	40 e0       	ldi	r20, 0x00	; 0
    1ed6:	0e 94 28 0b 	call	0x1650	; 0x1650 <GPIO_writePin>
	GPIO_writePin(MOTOR2_PORTID, MOTOR2_IN2_PINID, LOGIC_LOW);
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	67 e0       	ldi	r22, 0x07	; 7
    1ede:	40 e0       	ldi	r20, 0x00	; 0
    1ee0:	0e 94 28 0b 	call	0x1650	; 0x1650 <GPIO_writePin>

	/* Inital the two motors works at full speed */
	Timer0_PWM_Start(100);
    1ee4:	84 e6       	ldi	r24, 0x64	; 100
    1ee6:	0e 94 31 09 	call	0x1262	; 0x1262 <Timer0_PWM_Start>
}
    1eea:	2a 96       	adiw	r28, 0x0a	; 10
    1eec:	0f b6       	in	r0, 0x3f	; 63
    1eee:	f8 94       	cli
    1ef0:	de bf       	out	0x3e, r29	; 62
    1ef2:	0f be       	out	0x3f, r0	; 63
    1ef4:	cd bf       	out	0x3d, r28	; 61
    1ef6:	cf 91       	pop	r28
    1ef8:	df 91       	pop	r29
    1efa:	08 95       	ret

00001efc <DcMotor1_Rotate>:
 * 1. The function responsible for rotate the DC Motor 1 CW/
 *    or A-CW or stop the motor based on the state input state value.
 * 2. Send the required duty cycle to the PWM driver based on the required speed value.
 */
void DcMotor1_Rotate(DcMotor_State a_state)
{
    1efc:	df 93       	push	r29
    1efe:	cf 93       	push	r28
    1f00:	00 d0       	rcall	.+0      	; 0x1f02 <DcMotor1_Rotate+0x6>
    1f02:	0f 92       	push	r0
    1f04:	cd b7       	in	r28, 0x3d	; 61
    1f06:	de b7       	in	r29, 0x3e	; 62
    1f08:	89 83       	std	Y+1, r24	; 0x01
	switch (a_state)
    1f0a:	89 81       	ldd	r24, Y+1	; 0x01
    1f0c:	28 2f       	mov	r18, r24
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	3b 83       	std	Y+3, r19	; 0x03
    1f12:	2a 83       	std	Y+2, r18	; 0x02
    1f14:	8a 81       	ldd	r24, Y+2	; 0x02
    1f16:	9b 81       	ldd	r25, Y+3	; 0x03
    1f18:	81 30       	cpi	r24, 0x01	; 1
    1f1a:	91 05       	cpc	r25, r1
    1f1c:	81 f0       	breq	.+32     	; 0x1f3e <DcMotor1_Rotate+0x42>
    1f1e:	2a 81       	ldd	r18, Y+2	; 0x02
    1f20:	3b 81       	ldd	r19, Y+3	; 0x03
    1f22:	22 30       	cpi	r18, 0x02	; 2
    1f24:	31 05       	cpc	r19, r1
    1f26:	b1 f4       	brne	.+44     	; 0x1f54 <DcMotor1_Rotate+0x58>
	{
	case CLOCK_Wise:
		/* Clock wise mode => (IN1 = 1 and INT2 = 0) */
		GPIO_writePin(MOTOR1_PORTID, MOTOR1_IN1_PINID, LOGIC_HIGH);
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	64 e0       	ldi	r22, 0x04	; 4
    1f2c:	41 e0       	ldi	r20, 0x01	; 1
    1f2e:	0e 94 28 0b 	call	0x1650	; 0x1650 <GPIO_writePin>
		GPIO_writePin(MOTOR1_PORTID, MOTOR1_IN2_PINID, LOGIC_LOW);
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	60 e0       	ldi	r22, 0x00	; 0
    1f36:	40 e0       	ldi	r20, 0x00	; 0
    1f38:	0e 94 28 0b 	call	0x1650	; 0x1650 <GPIO_writePin>
    1f3c:	15 c0       	rjmp	.+42     	; 0x1f68 <DcMotor1_Rotate+0x6c>
		break;
	case ANTI_CLOCK_WISE:
		/* Anti clock wise mode => (IN1 = 0 and INT2 = 1) */
		GPIO_writePin(MOTOR1_PORTID, MOTOR1_IN1_PINID, LOGIC_LOW);
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	64 e0       	ldi	r22, 0x04	; 4
    1f42:	40 e0       	ldi	r20, 0x00	; 0
    1f44:	0e 94 28 0b 	call	0x1650	; 0x1650 <GPIO_writePin>
		GPIO_writePin(MOTOR1_PORTID, MOTOR1_IN2_PINID, LOGIC_HIGH);
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	60 e0       	ldi	r22, 0x00	; 0
    1f4c:	41 e0       	ldi	r20, 0x01	; 1
    1f4e:	0e 94 28 0b 	call	0x1650	; 0x1650 <GPIO_writePin>
    1f52:	0a c0       	rjmp	.+20     	; 0x1f68 <DcMotor1_Rotate+0x6c>
		break;
	default:
		/* Any case else, the motor be in stop mode */
		GPIO_writePin(MOTOR1_PORTID, MOTOR1_IN1_PINID, LOGIC_LOW);
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	64 e0       	ldi	r22, 0x04	; 4
    1f58:	40 e0       	ldi	r20, 0x00	; 0
    1f5a:	0e 94 28 0b 	call	0x1650	; 0x1650 <GPIO_writePin>
		GPIO_writePin(MOTOR1_PORTID, MOTOR1_IN2_PINID, LOGIC_LOW);
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	60 e0       	ldi	r22, 0x00	; 0
    1f62:	40 e0       	ldi	r20, 0x00	; 0
    1f64:	0e 94 28 0b 	call	0x1650	; 0x1650 <GPIO_writePin>
	}
}
    1f68:	0f 90       	pop	r0
    1f6a:	0f 90       	pop	r0
    1f6c:	0f 90       	pop	r0
    1f6e:	cf 91       	pop	r28
    1f70:	df 91       	pop	r29
    1f72:	08 95       	ret

00001f74 <DcMotor2_Rotate>:
 * 1. The function responsible for rotate the DC Motor 2 CW/
 *    or A-CW or stop the motor based on the state input state value.
 * 2. Send the required duty cycle to the PWM driver based on the required speed value.
 */
void DcMotor2_Rotate(DcMotor_State a_state)
{
    1f74:	df 93       	push	r29
    1f76:	cf 93       	push	r28
    1f78:	00 d0       	rcall	.+0      	; 0x1f7a <DcMotor2_Rotate+0x6>
    1f7a:	0f 92       	push	r0
    1f7c:	cd b7       	in	r28, 0x3d	; 61
    1f7e:	de b7       	in	r29, 0x3e	; 62
    1f80:	89 83       	std	Y+1, r24	; 0x01
	switch (a_state)
    1f82:	89 81       	ldd	r24, Y+1	; 0x01
    1f84:	28 2f       	mov	r18, r24
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	3b 83       	std	Y+3, r19	; 0x03
    1f8a:	2a 83       	std	Y+2, r18	; 0x02
    1f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f90:	81 30       	cpi	r24, 0x01	; 1
    1f92:	91 05       	cpc	r25, r1
    1f94:	81 f0       	breq	.+32     	; 0x1fb6 <DcMotor2_Rotate+0x42>
    1f96:	2a 81       	ldd	r18, Y+2	; 0x02
    1f98:	3b 81       	ldd	r19, Y+3	; 0x03
    1f9a:	22 30       	cpi	r18, 0x02	; 2
    1f9c:	31 05       	cpc	r19, r1
    1f9e:	b1 f4       	brne	.+44     	; 0x1fcc <DcMotor2_Rotate+0x58>
	{
	case CLOCK_Wise:
		/* Clock wise mode => (IN1 = 1 and INT2 = 0) */
		GPIO_writePin(MOTOR2_PORTID, MOTOR2_IN1_PINID, LOGIC_HIGH);
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	66 e0       	ldi	r22, 0x06	; 6
    1fa4:	41 e0       	ldi	r20, 0x01	; 1
    1fa6:	0e 94 28 0b 	call	0x1650	; 0x1650 <GPIO_writePin>
		GPIO_writePin(MOTOR2_PORTID, MOTOR2_IN2_PINID, LOGIC_LOW);
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	67 e0       	ldi	r22, 0x07	; 7
    1fae:	40 e0       	ldi	r20, 0x00	; 0
    1fb0:	0e 94 28 0b 	call	0x1650	; 0x1650 <GPIO_writePin>
    1fb4:	15 c0       	rjmp	.+42     	; 0x1fe0 <DcMotor2_Rotate+0x6c>
		break;
	case ANTI_CLOCK_WISE:
		/* Anti clock wise mode => (IN1 = 0 and INT2 = 1) */
		GPIO_writePin(MOTOR2_PORTID, MOTOR2_IN1_PINID, LOGIC_LOW);
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	66 e0       	ldi	r22, 0x06	; 6
    1fba:	40 e0       	ldi	r20, 0x00	; 0
    1fbc:	0e 94 28 0b 	call	0x1650	; 0x1650 <GPIO_writePin>
		GPIO_writePin(MOTOR2_PORTID, MOTOR2_IN2_PINID, LOGIC_HIGH);
    1fc0:	81 e0       	ldi	r24, 0x01	; 1
    1fc2:	67 e0       	ldi	r22, 0x07	; 7
    1fc4:	41 e0       	ldi	r20, 0x01	; 1
    1fc6:	0e 94 28 0b 	call	0x1650	; 0x1650 <GPIO_writePin>
    1fca:	0a c0       	rjmp	.+20     	; 0x1fe0 <DcMotor2_Rotate+0x6c>
		break;
	default:
		/* Any case else, the motor be in stop mode */
		GPIO_writePin(MOTOR2_PORTID, MOTOR2_IN1_PINID, LOGIC_LOW);
    1fcc:	81 e0       	ldi	r24, 0x01	; 1
    1fce:	66 e0       	ldi	r22, 0x06	; 6
    1fd0:	40 e0       	ldi	r20, 0x00	; 0
    1fd2:	0e 94 28 0b 	call	0x1650	; 0x1650 <GPIO_writePin>
		GPIO_writePin(MOTOR2_PORTID, MOTOR2_IN2_PINID, LOGIC_LOW);
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	67 e0       	ldi	r22, 0x07	; 7
    1fda:	40 e0       	ldi	r20, 0x00	; 0
    1fdc:	0e 94 28 0b 	call	0x1650	; 0x1650 <GPIO_writePin>
	}
}
    1fe0:	0f 90       	pop	r0
    1fe2:	0f 90       	pop	r0
    1fe4:	0f 90       	pop	r0
    1fe6:	cf 91       	pop	r28
    1fe8:	df 91       	pop	r29
    1fea:	08 95       	ret

00001fec <IR_sensor_Init>:
#include "../../MCAL/GPIO/Gpio_Interface.h"



void IR_sensor_Init(void)
{
    1fec:	df 93       	push	r29
    1fee:	cf 93       	push	r28
    1ff0:	cd b7       	in	r28, 0x3d	; 61
    1ff2:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(IR1_PORTIA, IR1_PINIA, PIN_INPUT);
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	64 e0       	ldi	r22, 0x04	; 4
    1ff8:	40 e0       	ldi	r20, 0x00	; 0
    1ffa:	0e 94 3d 0a 	call	0x147a	; 0x147a <GPIO_setupPinDirection>
	GPIO_setupPinDirection(IR2_PORTIA, IR2_PINIA, PIN_INPUT);
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	65 e0       	ldi	r22, 0x05	; 5
    2002:	40 e0       	ldi	r20, 0x00	; 0
    2004:	0e 94 3d 0a 	call	0x147a	; 0x147a <GPIO_setupPinDirection>
}
    2008:	cf 91       	pop	r28
    200a:	df 91       	pop	r29
    200c:	08 95       	ret

0000200e <IR1_READ>:


uint8 IR1_READ(void)
{
    200e:	df 93       	push	r29
    2010:	cf 93       	push	r28
    2012:	00 d0       	rcall	.+0      	; 0x2014 <IR1_READ+0x6>
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62

	uint8 x = 1;
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	89 83       	std	Y+1, r24	; 0x01


	x = GPIO_readPin(IR1_PORTIA, IR1_PINIA);
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	64 e0       	ldi	r22, 0x04	; 4
    2020:	0e 94 13 0c 	call	0x1826	; 0x1826 <GPIO_readPin>
    2024:	89 83       	std	Y+1, r24	; 0x01
	if (x ==1)
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	81 30       	cpi	r24, 0x01	; 1
    202a:	19 f4       	brne	.+6      	; 0x2032 <IR1_READ+0x24>
	{
		return 1;
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	8a 83       	std	Y+2, r24	; 0x02
    2030:	01 c0       	rjmp	.+2      	; 0x2034 <IR1_READ+0x26>
	}
	else
	{
		return 0;
    2032:	1a 82       	std	Y+2, r1	; 0x02
    2034:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    2036:	0f 90       	pop	r0
    2038:	0f 90       	pop	r0
    203a:	cf 91       	pop	r28
    203c:	df 91       	pop	r29
    203e:	08 95       	ret

00002040 <IR2_READ>:

uint8 IR2_READ(void)
{
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	00 d0       	rcall	.+0      	; 0x2046 <IR2_READ+0x6>
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
	uint8 y = 1;
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	89 83       	std	Y+1, r24	; 0x01


	y = GPIO_readPin(IR1_PORTIA, IR2_PINIA);
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	65 e0       	ldi	r22, 0x05	; 5
    2052:	0e 94 13 0c 	call	0x1826	; 0x1826 <GPIO_readPin>
    2056:	89 83       	std	Y+1, r24	; 0x01
	if (y ==1)
    2058:	89 81       	ldd	r24, Y+1	; 0x01
    205a:	81 30       	cpi	r24, 0x01	; 1
    205c:	19 f4       	brne	.+6      	; 0x2064 <IR2_READ+0x24>
	{
		return 1;
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	8a 83       	std	Y+2, r24	; 0x02
    2062:	01 c0       	rjmp	.+2      	; 0x2066 <IR2_READ+0x26>
	}
	else
	{
		return 0;
    2064:	1a 82       	std	Y+2, r1	; 0x02
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
	}
}
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	cf 91       	pop	r28
    206e:	df 91       	pop	r29
    2070:	08 95       	ret

00002072 <bluetooth_init>:
/*
 * Description :
 * The Function responsible for setup the bluetooth module with suitable baud rate.
 */
void bluetooth_init()
{
    2072:	df 93       	push	r29
    2074:	cf 93       	push	r28
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
	UART_init(9600);
    207a:	60 e8       	ldi	r22, 0x80	; 128
    207c:	75 e2       	ldi	r23, 0x25	; 37
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_init>
}
    2086:	cf 91       	pop	r28
    2088:	df 91       	pop	r29
    208a:	08 95       	ret

0000208c <bluetooth_recieveByte>:
/*
 * Description :
 * The Function responsible for receive data from bluetooth module.
 */
uint8 bluetooth_recieveByte()
{
    208c:	df 93       	push	r29
    208e:	cf 93       	push	r28
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
	return UART_recieveByte();
    2094:	0e 94 7a 07 	call	0xef4	; 0xef4 <UART_recieveByte>
}
    2098:	cf 91       	pop	r28
    209a:	df 91       	pop	r29
    209c:	08 95       	ret

0000209e <bluetooth_sendByte>:
/*
 * Description :
 * The Function responsible for send data through bluetooth module.
 */
void bluetooth_sendByte(uint8 data)
{
    209e:	df 93       	push	r29
    20a0:	cf 93       	push	r28
    20a2:	0f 92       	push	r0
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
    20a8:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(data);
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	0e 94 63 07 	call	0xec6	; 0xec6 <UART_sendByte>
}
    20b0:	0f 90       	pop	r0
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	08 95       	ret

000020b8 <main>:
void ULTRA_Desicion();
void Desicion_Direction();
void IR_Desicion();

int main()
{
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62
	/* Configuration and initialization functions */
	DcMotor_Init();
    20c0:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <DcMotor_Init>
	bluetooth_init();
    20c4:	0e 94 39 10 	call	0x2072	; 0x2072 <bluetooth_init>
	Ultrasonic_init();
    20c8:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <Ultrasonic_init>
	IR_sensor_Init();
    20cc:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <IR_sensor_Init>




	SREG_REG.Bits.I_Bit = 1;
    20d0:	ef e5       	ldi	r30, 0x5F	; 95
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	80 68       	ori	r24, 0x80	; 128
    20d8:	80 83       	st	Z, r24


	while (1)
	{

		HC5_input = bluetooth_recieveByte();
    20da:	0e 94 46 10 	call	0x208c	; 0x208c <bluetooth_recieveByte>
    20de:	80 93 75 01 	sts	0x0175, r24
    20e2:	09 c0       	rjmp	.+18     	; 0x20f6 <main+0x3e>
		while (HC5_input == 'W') //RC mode
		{
			HC5_input = bluetooth_recieveByte();
    20e4:	0e 94 46 10 	call	0x208c	; 0x208c <bluetooth_recieveByte>
    20e8:	80 93 75 01 	sts	0x0175, r24
			RC_Desicion();
    20ec:	0e 94 5d 13 	call	0x26ba	; 0x26ba <RC_Desicion>


			HC5_input = 'W';
    20f0:	87 e5       	ldi	r24, 0x57	; 87
    20f2:	80 93 75 01 	sts	0x0175, r24

	while (1)
	{

		HC5_input = bluetooth_recieveByte();
		while (HC5_input == 'W') //RC mode
    20f6:	80 91 75 01 	lds	r24, 0x0175
    20fa:	87 35       	cpi	r24, 0x57	; 87
    20fc:	99 f3       	breq	.-26     	; 0x20e4 <main+0x2c>
    20fe:	0e c0       	rjmp	.+28     	; 0x211c <main+0x64>

			HC5_input = 'W';
		}
		while (HC5_input == 'U') //ultrasonic mode
		{
			Set_Speed(40);
    2100:	88 e2       	ldi	r24, 0x28	; 40
    2102:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <Set_Speed>
			Ultra_Distance = Ultrasonic_readDistance();
    2106:	0e 94 77 0e 	call	0x1cee	; 0x1cee <Ultrasonic_readDistance>
    210a:	80 93 76 01 	sts	0x0176, r24

			Desicion_Direction();
    210e:	0e 94 aa 13 	call	0x2754	; 0x2754 <Desicion_Direction>

			ULTRA_Desicion();
    2112:	0e 94 f5 13 	call	0x27ea	; 0x27ea <ULTRA_Desicion>

			HC5_input = 'U';
    2116:	85 e5       	ldi	r24, 0x55	; 85
    2118:	80 93 75 01 	sts	0x0175, r24
			RC_Desicion();


			HC5_input = 'W';
		}
		while (HC5_input == 'U') //ultrasonic mode
    211c:	80 91 75 01 	lds	r24, 0x0175
    2120:	85 35       	cpi	r24, 0x55	; 85
    2122:	71 f3       	breq	.-36     	; 0x2100 <main+0x48>
    2124:	05 c0       	rjmp	.+10     	; 0x2130 <main+0x78>
			HC5_input = 'U';
		}
		while (HC5_input == 'I') //RC mode
		{
			//HC5_input = bluetooth_recieveByte();
			IR_Desicion();
    2126:	0e 94 9d 10 	call	0x213a	; 0x213a <IR_Desicion>

			HC5_input = 'I';
    212a:	89 e4       	ldi	r24, 0x49	; 73
    212c:	80 93 75 01 	sts	0x0175, r24

			ULTRA_Desicion();

			HC5_input = 'U';
		}
		while (HC5_input == 'I') //RC mode
    2130:	80 91 75 01 	lds	r24, 0x0175
    2134:	89 34       	cpi	r24, 0x49	; 73
    2136:	b9 f3       	breq	.-18     	; 0x2126 <main+0x6e>
    2138:	d0 cf       	rjmp	.-96     	; 0x20da <main+0x22>

0000213a <IR_Desicion>:

	}
}

void IR_Desicion()
{
    213a:	0f 93       	push	r16
    213c:	1f 93       	push	r17
    213e:	df 93       	push	r29
    2140:	cf 93       	push	r28
    2142:	cd b7       	in	r28, 0x3d	; 61
    2144:	de b7       	in	r29, 0x3e	; 62
    2146:	c8 54       	subi	r28, 0x48	; 72
    2148:	d0 40       	sbci	r29, 0x00	; 0
    214a:	0f b6       	in	r0, 0x3f	; 63
    214c:	f8 94       	cli
    214e:	de bf       	out	0x3e, r29	; 62
    2150:	0f be       	out	0x3f, r0	; 63
    2152:	cd bf       	out	0x3d, r28	; 61
	Left_Read =IR1_READ();
    2154:	0e 94 07 10 	call	0x200e	; 0x200e <IR1_READ>
    2158:	80 93 77 01 	sts	0x0177, r24
	Right_Read = IR2_READ();
    215c:	0e 94 20 10 	call	0x2040	; 0x2040 <IR2_READ>
    2160:	80 93 78 01 	sts	0x0178, r24


	if (Left_Read==1 && Right_Read==1)
    2164:	80 91 77 01 	lds	r24, 0x0177
    2168:	81 30       	cpi	r24, 0x01	; 1
    216a:	39 f4       	brne	.+14     	; 0x217a <IR_Desicion+0x40>
    216c:	80 91 78 01 	lds	r24, 0x0178
    2170:	81 30       	cpi	r24, 0x01	; 1
    2172:	19 f4       	brne	.+6      	; 0x217a <IR_Desicion+0x40>
	{
		Move_Forward();
    2174:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <Move_Forward>
    2178:	94 c2       	rjmp	.+1320   	; 0x26a2 <IR_Desicion+0x568>
	}
	else if (Left_Read==0 && Right_Read==1)
    217a:	80 91 77 01 	lds	r24, 0x0177
    217e:	88 23       	and	r24, r24
    2180:	09 f0       	breq	.+2      	; 0x2184 <IR_Desicion+0x4a>
    2182:	03 c1       	rjmp	.+518    	; 0x238a <IR_Desicion+0x250>
    2184:	80 91 78 01 	lds	r24, 0x0178
    2188:	81 30       	cpi	r24, 0x01	; 1
    218a:	09 f0       	breq	.+2      	; 0x218e <IR_Desicion+0x54>
    218c:	fe c0       	rjmp	.+508    	; 0x238a <IR_Desicion+0x250>
	{
		Move_Backward();
    218e:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <Move_Backward>
    2192:	fe 01       	movw	r30, r28
    2194:	ed 5b       	subi	r30, 0xBD	; 189
    2196:	ff 4f       	sbci	r31, 0xFF	; 255
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	a8 e4       	ldi	r26, 0x48	; 72
    219e:	b3 e4       	ldi	r27, 0x43	; 67
    21a0:	80 83       	st	Z, r24
    21a2:	91 83       	std	Z+1, r25	; 0x01
    21a4:	a2 83       	std	Z+2, r26	; 0x02
    21a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21a8:	8e 01       	movw	r16, r28
    21aa:	01 5c       	subi	r16, 0xC1	; 193
    21ac:	1f 4f       	sbci	r17, 0xFF	; 255
    21ae:	fe 01       	movw	r30, r28
    21b0:	ed 5b       	subi	r30, 0xBD	; 189
    21b2:	ff 4f       	sbci	r31, 0xFF	; 255
    21b4:	60 81       	ld	r22, Z
    21b6:	71 81       	ldd	r23, Z+1	; 0x01
    21b8:	82 81       	ldd	r24, Z+2	; 0x02
    21ba:	93 81       	ldd	r25, Z+3	; 0x03
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	4a ef       	ldi	r20, 0xFA	; 250
    21c2:	54 e4       	ldi	r21, 0x44	; 68
    21c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c8:	dc 01       	movw	r26, r24
    21ca:	cb 01       	movw	r24, r22
    21cc:	f8 01       	movw	r30, r16
    21ce:	80 83       	st	Z, r24
    21d0:	91 83       	std	Z+1, r25	; 0x01
    21d2:	a2 83       	std	Z+2, r26	; 0x02
    21d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21d6:	fe 01       	movw	r30, r28
    21d8:	ff 96       	adiw	r30, 0x3f	; 63
    21da:	60 81       	ld	r22, Z
    21dc:	71 81       	ldd	r23, Z+1	; 0x01
    21de:	82 81       	ldd	r24, Z+2	; 0x02
    21e0:	93 81       	ldd	r25, Z+3	; 0x03
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	40 e8       	ldi	r20, 0x80	; 128
    21e8:	5f e3       	ldi	r21, 0x3F	; 63
    21ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21ee:	88 23       	and	r24, r24
    21f0:	2c f4       	brge	.+10     	; 0x21fc <IR_Desicion+0xc2>
		__ticks = 1;
    21f2:	81 e0       	ldi	r24, 0x01	; 1
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	9e af       	std	Y+62, r25	; 0x3e
    21f8:	8d af       	std	Y+61, r24	; 0x3d
    21fa:	46 c0       	rjmp	.+140    	; 0x2288 <IR_Desicion+0x14e>
	else if (__tmp > 65535)
    21fc:	fe 01       	movw	r30, r28
    21fe:	ff 96       	adiw	r30, 0x3f	; 63
    2200:	60 81       	ld	r22, Z
    2202:	71 81       	ldd	r23, Z+1	; 0x01
    2204:	82 81       	ldd	r24, Z+2	; 0x02
    2206:	93 81       	ldd	r25, Z+3	; 0x03
    2208:	20 e0       	ldi	r18, 0x00	; 0
    220a:	3f ef       	ldi	r19, 0xFF	; 255
    220c:	4f e7       	ldi	r20, 0x7F	; 127
    220e:	57 e4       	ldi	r21, 0x47	; 71
    2210:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2214:	18 16       	cp	r1, r24
    2216:	64 f5       	brge	.+88     	; 0x2270 <IR_Desicion+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2218:	fe 01       	movw	r30, r28
    221a:	ed 5b       	subi	r30, 0xBD	; 189
    221c:	ff 4f       	sbci	r31, 0xFF	; 255
    221e:	60 81       	ld	r22, Z
    2220:	71 81       	ldd	r23, Z+1	; 0x01
    2222:	82 81       	ldd	r24, Z+2	; 0x02
    2224:	93 81       	ldd	r25, Z+3	; 0x03
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	40 e2       	ldi	r20, 0x20	; 32
    222c:	51 e4       	ldi	r21, 0x41	; 65
    222e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2232:	dc 01       	movw	r26, r24
    2234:	cb 01       	movw	r24, r22
    2236:	bc 01       	movw	r22, r24
    2238:	cd 01       	movw	r24, r26
    223a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223e:	dc 01       	movw	r26, r24
    2240:	cb 01       	movw	r24, r22
    2242:	9e af       	std	Y+62, r25	; 0x3e
    2244:	8d af       	std	Y+61, r24	; 0x3d
    2246:	0f c0       	rjmp	.+30     	; 0x2266 <IR_Desicion+0x12c>
    2248:	88 ec       	ldi	r24, 0xC8	; 200
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	9c af       	std	Y+60, r25	; 0x3c
    224e:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2250:	8b ad       	ldd	r24, Y+59	; 0x3b
    2252:	9c ad       	ldd	r25, Y+60	; 0x3c
    2254:	01 97       	sbiw	r24, 0x01	; 1
    2256:	f1 f7       	brne	.-4      	; 0x2254 <IR_Desicion+0x11a>
    2258:	9c af       	std	Y+60, r25	; 0x3c
    225a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    225c:	8d ad       	ldd	r24, Y+61	; 0x3d
    225e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2260:	01 97       	sbiw	r24, 0x01	; 1
    2262:	9e af       	std	Y+62, r25	; 0x3e
    2264:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2266:	8d ad       	ldd	r24, Y+61	; 0x3d
    2268:	9e ad       	ldd	r25, Y+62	; 0x3e
    226a:	00 97       	sbiw	r24, 0x00	; 0
    226c:	69 f7       	brne	.-38     	; 0x2248 <IR_Desicion+0x10e>
    226e:	16 c0       	rjmp	.+44     	; 0x229c <IR_Desicion+0x162>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2270:	fe 01       	movw	r30, r28
    2272:	ff 96       	adiw	r30, 0x3f	; 63
    2274:	60 81       	ld	r22, Z
    2276:	71 81       	ldd	r23, Z+1	; 0x01
    2278:	82 81       	ldd	r24, Z+2	; 0x02
    227a:	93 81       	ldd	r25, Z+3	; 0x03
    227c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	9e af       	std	Y+62, r25	; 0x3e
    2286:	8d af       	std	Y+61, r24	; 0x3d
    2288:	8d ad       	ldd	r24, Y+61	; 0x3d
    228a:	9e ad       	ldd	r25, Y+62	; 0x3e
    228c:	9a af       	std	Y+58, r25	; 0x3a
    228e:	89 af       	std	Y+57, r24	; 0x39
    2290:	89 ad       	ldd	r24, Y+57	; 0x39
    2292:	9a ad       	ldd	r25, Y+58	; 0x3a
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	f1 f7       	brne	.-4      	; 0x2294 <IR_Desicion+0x15a>
    2298:	9a af       	std	Y+58, r25	; 0x3a
    229a:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(200);
		Move_Left();
    229c:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <Move_Left>
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	90 e0       	ldi	r25, 0x00	; 0
    22a4:	aa ef       	ldi	r26, 0xFA	; 250
    22a6:	b3 e4       	ldi	r27, 0x43	; 67
    22a8:	8d ab       	std	Y+53, r24	; 0x35
    22aa:	9e ab       	std	Y+54, r25	; 0x36
    22ac:	af ab       	std	Y+55, r26	; 0x37
    22ae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b0:	6d a9       	ldd	r22, Y+53	; 0x35
    22b2:	7e a9       	ldd	r23, Y+54	; 0x36
    22b4:	8f a9       	ldd	r24, Y+55	; 0x37
    22b6:	98 ad       	ldd	r25, Y+56	; 0x38
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	4a ef       	ldi	r20, 0xFA	; 250
    22be:	54 e4       	ldi	r21, 0x44	; 68
    22c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c4:	dc 01       	movw	r26, r24
    22c6:	cb 01       	movw	r24, r22
    22c8:	89 ab       	std	Y+49, r24	; 0x31
    22ca:	9a ab       	std	Y+50, r25	; 0x32
    22cc:	ab ab       	std	Y+51, r26	; 0x33
    22ce:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22d0:	69 a9       	ldd	r22, Y+49	; 0x31
    22d2:	7a a9       	ldd	r23, Y+50	; 0x32
    22d4:	8b a9       	ldd	r24, Y+51	; 0x33
    22d6:	9c a9       	ldd	r25, Y+52	; 0x34
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	40 e8       	ldi	r20, 0x80	; 128
    22de:	5f e3       	ldi	r21, 0x3F	; 63
    22e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22e4:	88 23       	and	r24, r24
    22e6:	2c f4       	brge	.+10     	; 0x22f2 <IR_Desicion+0x1b8>
		__ticks = 1;
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	98 ab       	std	Y+48, r25	; 0x30
    22ee:	8f a7       	std	Y+47, r24	; 0x2f
    22f0:	3f c0       	rjmp	.+126    	; 0x2370 <IR_Desicion+0x236>
	else if (__tmp > 65535)
    22f2:	69 a9       	ldd	r22, Y+49	; 0x31
    22f4:	7a a9       	ldd	r23, Y+50	; 0x32
    22f6:	8b a9       	ldd	r24, Y+51	; 0x33
    22f8:	9c a9       	ldd	r25, Y+52	; 0x34
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	3f ef       	ldi	r19, 0xFF	; 255
    22fe:	4f e7       	ldi	r20, 0x7F	; 127
    2300:	57 e4       	ldi	r21, 0x47	; 71
    2302:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2306:	18 16       	cp	r1, r24
    2308:	4c f5       	brge	.+82     	; 0x235c <IR_Desicion+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    230a:	6d a9       	ldd	r22, Y+53	; 0x35
    230c:	7e a9       	ldd	r23, Y+54	; 0x36
    230e:	8f a9       	ldd	r24, Y+55	; 0x37
    2310:	98 ad       	ldd	r25, Y+56	; 0x38
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	40 e2       	ldi	r20, 0x20	; 32
    2318:	51 e4       	ldi	r21, 0x41	; 65
    231a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231e:	dc 01       	movw	r26, r24
    2320:	cb 01       	movw	r24, r22
    2322:	bc 01       	movw	r22, r24
    2324:	cd 01       	movw	r24, r26
    2326:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232a:	dc 01       	movw	r26, r24
    232c:	cb 01       	movw	r24, r22
    232e:	98 ab       	std	Y+48, r25	; 0x30
    2330:	8f a7       	std	Y+47, r24	; 0x2f
    2332:	0f c0       	rjmp	.+30     	; 0x2352 <IR_Desicion+0x218>
    2334:	88 ec       	ldi	r24, 0xC8	; 200
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	9e a7       	std	Y+46, r25	; 0x2e
    233a:	8d a7       	std	Y+45, r24	; 0x2d
    233c:	8d a5       	ldd	r24, Y+45	; 0x2d
    233e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2340:	01 97       	sbiw	r24, 0x01	; 1
    2342:	f1 f7       	brne	.-4      	; 0x2340 <IR_Desicion+0x206>
    2344:	9e a7       	std	Y+46, r25	; 0x2e
    2346:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2348:	8f a5       	ldd	r24, Y+47	; 0x2f
    234a:	98 a9       	ldd	r25, Y+48	; 0x30
    234c:	01 97       	sbiw	r24, 0x01	; 1
    234e:	98 ab       	std	Y+48, r25	; 0x30
    2350:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2352:	8f a5       	ldd	r24, Y+47	; 0x2f
    2354:	98 a9       	ldd	r25, Y+48	; 0x30
    2356:	00 97       	sbiw	r24, 0x00	; 0
    2358:	69 f7       	brne	.-38     	; 0x2334 <IR_Desicion+0x1fa>
    235a:	14 c0       	rjmp	.+40     	; 0x2384 <IR_Desicion+0x24a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    235c:	69 a9       	ldd	r22, Y+49	; 0x31
    235e:	7a a9       	ldd	r23, Y+50	; 0x32
    2360:	8b a9       	ldd	r24, Y+51	; 0x33
    2362:	9c a9       	ldd	r25, Y+52	; 0x34
    2364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2368:	dc 01       	movw	r26, r24
    236a:	cb 01       	movw	r24, r22
    236c:	98 ab       	std	Y+48, r25	; 0x30
    236e:	8f a7       	std	Y+47, r24	; 0x2f
    2370:	8f a5       	ldd	r24, Y+47	; 0x2f
    2372:	98 a9       	ldd	r25, Y+48	; 0x30
    2374:	9c a7       	std	Y+44, r25	; 0x2c
    2376:	8b a7       	std	Y+43, r24	; 0x2b
    2378:	8b a5       	ldd	r24, Y+43	; 0x2b
    237a:	9c a5       	ldd	r25, Y+44	; 0x2c
    237c:	01 97       	sbiw	r24, 0x01	; 1
    237e:	f1 f7       	brne	.-4      	; 0x237c <IR_Desicion+0x242>
    2380:	9c a7       	std	Y+44, r25	; 0x2c
    2382:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(500);
		stop();
    2384:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <stop>
    2388:	8c c1       	rjmp	.+792    	; 0x26a2 <IR_Desicion+0x568>
	}
	else if (Left_Read==1 && Right_Read==0)
    238a:	80 91 77 01 	lds	r24, 0x0177
    238e:	81 30       	cpi	r24, 0x01	; 1
    2390:	09 f0       	breq	.+2      	; 0x2394 <IR_Desicion+0x25a>
    2392:	f0 c0       	rjmp	.+480    	; 0x2574 <IR_Desicion+0x43a>
    2394:	80 91 78 01 	lds	r24, 0x0178
    2398:	88 23       	and	r24, r24
    239a:	09 f0       	breq	.+2      	; 0x239e <IR_Desicion+0x264>
    239c:	eb c0       	rjmp	.+470    	; 0x2574 <IR_Desicion+0x43a>
	{
		Move_Backward();
    239e:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <Move_Backward>
    23a2:	80 e0       	ldi	r24, 0x00	; 0
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	a8 e4       	ldi	r26, 0x48	; 72
    23a8:	b3 e4       	ldi	r27, 0x43	; 67
    23aa:	8f a3       	std	Y+39, r24	; 0x27
    23ac:	98 a7       	std	Y+40, r25	; 0x28
    23ae:	a9 a7       	std	Y+41, r26	; 0x29
    23b0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b2:	6f a1       	ldd	r22, Y+39	; 0x27
    23b4:	78 a5       	ldd	r23, Y+40	; 0x28
    23b6:	89 a5       	ldd	r24, Y+41	; 0x29
    23b8:	9a a5       	ldd	r25, Y+42	; 0x2a
    23ba:	20 e0       	ldi	r18, 0x00	; 0
    23bc:	30 e0       	ldi	r19, 0x00	; 0
    23be:	4a ef       	ldi	r20, 0xFA	; 250
    23c0:	54 e4       	ldi	r21, 0x44	; 68
    23c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	8b a3       	std	Y+35, r24	; 0x23
    23cc:	9c a3       	std	Y+36, r25	; 0x24
    23ce:	ad a3       	std	Y+37, r26	; 0x25
    23d0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23d2:	6b a1       	ldd	r22, Y+35	; 0x23
    23d4:	7c a1       	ldd	r23, Y+36	; 0x24
    23d6:	8d a1       	ldd	r24, Y+37	; 0x25
    23d8:	9e a1       	ldd	r25, Y+38	; 0x26
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	40 e8       	ldi	r20, 0x80	; 128
    23e0:	5f e3       	ldi	r21, 0x3F	; 63
    23e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23e6:	88 23       	and	r24, r24
    23e8:	2c f4       	brge	.+10     	; 0x23f4 <IR_Desicion+0x2ba>
		__ticks = 1;
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	9a a3       	std	Y+34, r25	; 0x22
    23f0:	89 a3       	std	Y+33, r24	; 0x21
    23f2:	3f c0       	rjmp	.+126    	; 0x2472 <IR_Desicion+0x338>
	else if (__tmp > 65535)
    23f4:	6b a1       	ldd	r22, Y+35	; 0x23
    23f6:	7c a1       	ldd	r23, Y+36	; 0x24
    23f8:	8d a1       	ldd	r24, Y+37	; 0x25
    23fa:	9e a1       	ldd	r25, Y+38	; 0x26
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	3f ef       	ldi	r19, 0xFF	; 255
    2400:	4f e7       	ldi	r20, 0x7F	; 127
    2402:	57 e4       	ldi	r21, 0x47	; 71
    2404:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2408:	18 16       	cp	r1, r24
    240a:	4c f5       	brge	.+82     	; 0x245e <IR_Desicion+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    240c:	6f a1       	ldd	r22, Y+39	; 0x27
    240e:	78 a5       	ldd	r23, Y+40	; 0x28
    2410:	89 a5       	ldd	r24, Y+41	; 0x29
    2412:	9a a5       	ldd	r25, Y+42	; 0x2a
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	40 e2       	ldi	r20, 0x20	; 32
    241a:	51 e4       	ldi	r21, 0x41	; 65
    241c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	bc 01       	movw	r22, r24
    2426:	cd 01       	movw	r24, r26
    2428:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	9a a3       	std	Y+34, r25	; 0x22
    2432:	89 a3       	std	Y+33, r24	; 0x21
    2434:	0f c0       	rjmp	.+30     	; 0x2454 <IR_Desicion+0x31a>
    2436:	88 ec       	ldi	r24, 0xC8	; 200
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	98 a3       	std	Y+32, r25	; 0x20
    243c:	8f 8f       	std	Y+31, r24	; 0x1f
    243e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2440:	98 a1       	ldd	r25, Y+32	; 0x20
    2442:	01 97       	sbiw	r24, 0x01	; 1
    2444:	f1 f7       	brne	.-4      	; 0x2442 <IR_Desicion+0x308>
    2446:	98 a3       	std	Y+32, r25	; 0x20
    2448:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    244a:	89 a1       	ldd	r24, Y+33	; 0x21
    244c:	9a a1       	ldd	r25, Y+34	; 0x22
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	9a a3       	std	Y+34, r25	; 0x22
    2452:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2454:	89 a1       	ldd	r24, Y+33	; 0x21
    2456:	9a a1       	ldd	r25, Y+34	; 0x22
    2458:	00 97       	sbiw	r24, 0x00	; 0
    245a:	69 f7       	brne	.-38     	; 0x2436 <IR_Desicion+0x2fc>
    245c:	14 c0       	rjmp	.+40     	; 0x2486 <IR_Desicion+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    245e:	6b a1       	ldd	r22, Y+35	; 0x23
    2460:	7c a1       	ldd	r23, Y+36	; 0x24
    2462:	8d a1       	ldd	r24, Y+37	; 0x25
    2464:	9e a1       	ldd	r25, Y+38	; 0x26
    2466:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246a:	dc 01       	movw	r26, r24
    246c:	cb 01       	movw	r24, r22
    246e:	9a a3       	std	Y+34, r25	; 0x22
    2470:	89 a3       	std	Y+33, r24	; 0x21
    2472:	89 a1       	ldd	r24, Y+33	; 0x21
    2474:	9a a1       	ldd	r25, Y+34	; 0x22
    2476:	9e 8f       	std	Y+30, r25	; 0x1e
    2478:	8d 8f       	std	Y+29, r24	; 0x1d
    247a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    247c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    247e:	01 97       	sbiw	r24, 0x01	; 1
    2480:	f1 f7       	brne	.-4      	; 0x247e <IR_Desicion+0x344>
    2482:	9e 8f       	std	Y+30, r25	; 0x1e
    2484:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(200);
		Move_Right();
    2486:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <Move_Right>
    248a:	80 e0       	ldi	r24, 0x00	; 0
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	aa ef       	ldi	r26, 0xFA	; 250
    2490:	b3 e4       	ldi	r27, 0x43	; 67
    2492:	89 8f       	std	Y+25, r24	; 0x19
    2494:	9a 8f       	std	Y+26, r25	; 0x1a
    2496:	ab 8f       	std	Y+27, r26	; 0x1b
    2498:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    249a:	69 8d       	ldd	r22, Y+25	; 0x19
    249c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    249e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24a0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	4a ef       	ldi	r20, 0xFA	; 250
    24a8:	54 e4       	ldi	r21, 0x44	; 68
    24aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ae:	dc 01       	movw	r26, r24
    24b0:	cb 01       	movw	r24, r22
    24b2:	8d 8b       	std	Y+21, r24	; 0x15
    24b4:	9e 8b       	std	Y+22, r25	; 0x16
    24b6:	af 8b       	std	Y+23, r26	; 0x17
    24b8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24ba:	6d 89       	ldd	r22, Y+21	; 0x15
    24bc:	7e 89       	ldd	r23, Y+22	; 0x16
    24be:	8f 89       	ldd	r24, Y+23	; 0x17
    24c0:	98 8d       	ldd	r25, Y+24	; 0x18
    24c2:	20 e0       	ldi	r18, 0x00	; 0
    24c4:	30 e0       	ldi	r19, 0x00	; 0
    24c6:	40 e8       	ldi	r20, 0x80	; 128
    24c8:	5f e3       	ldi	r21, 0x3F	; 63
    24ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24ce:	88 23       	and	r24, r24
    24d0:	2c f4       	brge	.+10     	; 0x24dc <IR_Desicion+0x3a2>
		__ticks = 1;
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	90 e0       	ldi	r25, 0x00	; 0
    24d6:	9c 8b       	std	Y+20, r25	; 0x14
    24d8:	8b 8b       	std	Y+19, r24	; 0x13
    24da:	3f c0       	rjmp	.+126    	; 0x255a <IR_Desicion+0x420>
	else if (__tmp > 65535)
    24dc:	6d 89       	ldd	r22, Y+21	; 0x15
    24de:	7e 89       	ldd	r23, Y+22	; 0x16
    24e0:	8f 89       	ldd	r24, Y+23	; 0x17
    24e2:	98 8d       	ldd	r25, Y+24	; 0x18
    24e4:	20 e0       	ldi	r18, 0x00	; 0
    24e6:	3f ef       	ldi	r19, 0xFF	; 255
    24e8:	4f e7       	ldi	r20, 0x7F	; 127
    24ea:	57 e4       	ldi	r21, 0x47	; 71
    24ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24f0:	18 16       	cp	r1, r24
    24f2:	4c f5       	brge	.+82     	; 0x2546 <IR_Desicion+0x40c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24f4:	69 8d       	ldd	r22, Y+25	; 0x19
    24f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24fc:	20 e0       	ldi	r18, 0x00	; 0
    24fe:	30 e0       	ldi	r19, 0x00	; 0
    2500:	40 e2       	ldi	r20, 0x20	; 32
    2502:	51 e4       	ldi	r21, 0x41	; 65
    2504:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	bc 01       	movw	r22, r24
    250e:	cd 01       	movw	r24, r26
    2510:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	9c 8b       	std	Y+20, r25	; 0x14
    251a:	8b 8b       	std	Y+19, r24	; 0x13
    251c:	0f c0       	rjmp	.+30     	; 0x253c <IR_Desicion+0x402>
    251e:	88 ec       	ldi	r24, 0xC8	; 200
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	9a 8b       	std	Y+18, r25	; 0x12
    2524:	89 8b       	std	Y+17, r24	; 0x11
    2526:	89 89       	ldd	r24, Y+17	; 0x11
    2528:	9a 89       	ldd	r25, Y+18	; 0x12
    252a:	01 97       	sbiw	r24, 0x01	; 1
    252c:	f1 f7       	brne	.-4      	; 0x252a <IR_Desicion+0x3f0>
    252e:	9a 8b       	std	Y+18, r25	; 0x12
    2530:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2532:	8b 89       	ldd	r24, Y+19	; 0x13
    2534:	9c 89       	ldd	r25, Y+20	; 0x14
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	9c 8b       	std	Y+20, r25	; 0x14
    253a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    253c:	8b 89       	ldd	r24, Y+19	; 0x13
    253e:	9c 89       	ldd	r25, Y+20	; 0x14
    2540:	00 97       	sbiw	r24, 0x00	; 0
    2542:	69 f7       	brne	.-38     	; 0x251e <IR_Desicion+0x3e4>
    2544:	14 c0       	rjmp	.+40     	; 0x256e <IR_Desicion+0x434>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2546:	6d 89       	ldd	r22, Y+21	; 0x15
    2548:	7e 89       	ldd	r23, Y+22	; 0x16
    254a:	8f 89       	ldd	r24, Y+23	; 0x17
    254c:	98 8d       	ldd	r25, Y+24	; 0x18
    254e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2552:	dc 01       	movw	r26, r24
    2554:	cb 01       	movw	r24, r22
    2556:	9c 8b       	std	Y+20, r25	; 0x14
    2558:	8b 8b       	std	Y+19, r24	; 0x13
    255a:	8b 89       	ldd	r24, Y+19	; 0x13
    255c:	9c 89       	ldd	r25, Y+20	; 0x14
    255e:	98 8b       	std	Y+16, r25	; 0x10
    2560:	8f 87       	std	Y+15, r24	; 0x0f
    2562:	8f 85       	ldd	r24, Y+15	; 0x0f
    2564:	98 89       	ldd	r25, Y+16	; 0x10
    2566:	01 97       	sbiw	r24, 0x01	; 1
    2568:	f1 f7       	brne	.-4      	; 0x2566 <IR_Desicion+0x42c>
    256a:	98 8b       	std	Y+16, r25	; 0x10
    256c:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		stop();
    256e:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <stop>
    2572:	97 c0       	rjmp	.+302    	; 0x26a2 <IR_Desicion+0x568>
	}
	else if (Left_Read==1 & Right_Read==1) {
    2574:	80 91 77 01 	lds	r24, 0x0177
    2578:	29 96       	adiw	r28, 0x09	; 9
    257a:	1f ae       	std	Y+63, r1	; 0x3f
    257c:	29 97       	sbiw	r28, 0x09	; 9
    257e:	81 30       	cpi	r24, 0x01	; 1
    2580:	21 f4       	brne	.+8      	; 0x258a <IR_Desicion+0x450>
    2582:	f1 e0       	ldi	r31, 0x01	; 1
    2584:	29 96       	adiw	r28, 0x09	; 9
    2586:	ff af       	std	Y+63, r31	; 0x3f
    2588:	29 97       	sbiw	r28, 0x09	; 9
    258a:	80 91 78 01 	lds	r24, 0x0178
    258e:	28 96       	adiw	r28, 0x08	; 8
    2590:	1f ae       	std	Y+63, r1	; 0x3f
    2592:	28 97       	sbiw	r28, 0x08	; 8
    2594:	81 30       	cpi	r24, 0x01	; 1
    2596:	21 f4       	brne	.+8      	; 0x25a0 <IR_Desicion+0x466>
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	28 96       	adiw	r28, 0x08	; 8
    259c:	8f af       	std	Y+63, r24	; 0x3f
    259e:	28 97       	sbiw	r28, 0x08	; 8
    25a0:	29 96       	adiw	r28, 0x09	; 9
    25a2:	8f ad       	ldd	r24, Y+63	; 0x3f
    25a4:	29 97       	sbiw	r28, 0x09	; 9
    25a6:	28 96       	adiw	r28, 0x08	; 8
    25a8:	9f ad       	ldd	r25, Y+63	; 0x3f
    25aa:	28 97       	sbiw	r28, 0x08	; 8
    25ac:	89 23       	and	r24, r25
    25ae:	88 23       	and	r24, r24
    25b0:	09 f4       	brne	.+2      	; 0x25b4 <IR_Desicion+0x47a>
    25b2:	75 c0       	rjmp	.+234    	; 0x269e <IR_Desicion+0x564>
		Move_Backward();
    25b4:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <Move_Backward>
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	a8 ec       	ldi	r26, 0xC8	; 200
    25be:	b3 e4       	ldi	r27, 0x43	; 67
    25c0:	8b 87       	std	Y+11, r24	; 0x0b
    25c2:	9c 87       	std	Y+12, r25	; 0x0c
    25c4:	ad 87       	std	Y+13, r26	; 0x0d
    25c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    25cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	4a ef       	ldi	r20, 0xFA	; 250
    25d6:	54 e4       	ldi	r21, 0x44	; 68
    25d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	8f 83       	std	Y+7, r24	; 0x07
    25e2:	98 87       	std	Y+8, r25	; 0x08
    25e4:	a9 87       	std	Y+9, r26	; 0x09
    25e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25e8:	6f 81       	ldd	r22, Y+7	; 0x07
    25ea:	78 85       	ldd	r23, Y+8	; 0x08
    25ec:	89 85       	ldd	r24, Y+9	; 0x09
    25ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	40 e8       	ldi	r20, 0x80	; 128
    25f6:	5f e3       	ldi	r21, 0x3F	; 63
    25f8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25fc:	88 23       	and	r24, r24
    25fe:	2c f4       	brge	.+10     	; 0x260a <IR_Desicion+0x4d0>
		__ticks = 1;
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	9e 83       	std	Y+6, r25	; 0x06
    2606:	8d 83       	std	Y+5, r24	; 0x05
    2608:	3f c0       	rjmp	.+126    	; 0x2688 <IR_Desicion+0x54e>
	else if (__tmp > 65535)
    260a:	6f 81       	ldd	r22, Y+7	; 0x07
    260c:	78 85       	ldd	r23, Y+8	; 0x08
    260e:	89 85       	ldd	r24, Y+9	; 0x09
    2610:	9a 85       	ldd	r25, Y+10	; 0x0a
    2612:	20 e0       	ldi	r18, 0x00	; 0
    2614:	3f ef       	ldi	r19, 0xFF	; 255
    2616:	4f e7       	ldi	r20, 0x7F	; 127
    2618:	57 e4       	ldi	r21, 0x47	; 71
    261a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    261e:	18 16       	cp	r1, r24
    2620:	4c f5       	brge	.+82     	; 0x2674 <IR_Desicion+0x53a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2622:	6b 85       	ldd	r22, Y+11	; 0x0b
    2624:	7c 85       	ldd	r23, Y+12	; 0x0c
    2626:	8d 85       	ldd	r24, Y+13	; 0x0d
    2628:	9e 85       	ldd	r25, Y+14	; 0x0e
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	40 e2       	ldi	r20, 0x20	; 32
    2630:	51 e4       	ldi	r21, 0x41	; 65
    2632:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	bc 01       	movw	r22, r24
    263c:	cd 01       	movw	r24, r26
    263e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2642:	dc 01       	movw	r26, r24
    2644:	cb 01       	movw	r24, r22
    2646:	9e 83       	std	Y+6, r25	; 0x06
    2648:	8d 83       	std	Y+5, r24	; 0x05
    264a:	0f c0       	rjmp	.+30     	; 0x266a <IR_Desicion+0x530>
    264c:	88 ec       	ldi	r24, 0xC8	; 200
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	9c 83       	std	Y+4, r25	; 0x04
    2652:	8b 83       	std	Y+3, r24	; 0x03
    2654:	8b 81       	ldd	r24, Y+3	; 0x03
    2656:	9c 81       	ldd	r25, Y+4	; 0x04
    2658:	01 97       	sbiw	r24, 0x01	; 1
    265a:	f1 f7       	brne	.-4      	; 0x2658 <IR_Desicion+0x51e>
    265c:	9c 83       	std	Y+4, r25	; 0x04
    265e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2660:	8d 81       	ldd	r24, Y+5	; 0x05
    2662:	9e 81       	ldd	r25, Y+6	; 0x06
    2664:	01 97       	sbiw	r24, 0x01	; 1
    2666:	9e 83       	std	Y+6, r25	; 0x06
    2668:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    266a:	8d 81       	ldd	r24, Y+5	; 0x05
    266c:	9e 81       	ldd	r25, Y+6	; 0x06
    266e:	00 97       	sbiw	r24, 0x00	; 0
    2670:	69 f7       	brne	.-38     	; 0x264c <IR_Desicion+0x512>
    2672:	17 c0       	rjmp	.+46     	; 0x26a2 <IR_Desicion+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2674:	6f 81       	ldd	r22, Y+7	; 0x07
    2676:	78 85       	ldd	r23, Y+8	; 0x08
    2678:	89 85       	ldd	r24, Y+9	; 0x09
    267a:	9a 85       	ldd	r25, Y+10	; 0x0a
    267c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2680:	dc 01       	movw	r26, r24
    2682:	cb 01       	movw	r24, r22
    2684:	9e 83       	std	Y+6, r25	; 0x06
    2686:	8d 83       	std	Y+5, r24	; 0x05
    2688:	8d 81       	ldd	r24, Y+5	; 0x05
    268a:	9e 81       	ldd	r25, Y+6	; 0x06
    268c:	9a 83       	std	Y+2, r25	; 0x02
    268e:	89 83       	std	Y+1, r24	; 0x01
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	9a 81       	ldd	r25, Y+2	; 0x02
    2694:	01 97       	sbiw	r24, 0x01	; 1
    2696:	f1 f7       	brne	.-4      	; 0x2694 <IR_Desicion+0x55a>
    2698:	9a 83       	std	Y+2, r25	; 0x02
    269a:	89 83       	std	Y+1, r24	; 0x01
    269c:	02 c0       	rjmp	.+4      	; 0x26a2 <IR_Desicion+0x568>
		_delay_ms(400);
	}
	else {
		stop();
    269e:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <stop>
	}

}
    26a2:	c8 5b       	subi	r28, 0xB8	; 184
    26a4:	df 4f       	sbci	r29, 0xFF	; 255
    26a6:	0f b6       	in	r0, 0x3f	; 63
    26a8:	f8 94       	cli
    26aa:	de bf       	out	0x3e, r29	; 62
    26ac:	0f be       	out	0x3f, r0	; 63
    26ae:	cd bf       	out	0x3d, r28	; 61
    26b0:	cf 91       	pop	r28
    26b2:	df 91       	pop	r29
    26b4:	1f 91       	pop	r17
    26b6:	0f 91       	pop	r16
    26b8:	08 95       	ret

000026ba <RC_Desicion>:

void RC_Desicion()
{
    26ba:	df 93       	push	r29
    26bc:	cf 93       	push	r28
    26be:	00 d0       	rcall	.+0      	; 0x26c0 <RC_Desicion+0x6>
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
	switch (HC5_input)
    26c4:	80 91 75 01 	lds	r24, 0x0175
    26c8:	28 2f       	mov	r18, r24
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	3a 83       	std	Y+2, r19	; 0x02
    26ce:	29 83       	std	Y+1, r18	; 0x01
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
    26d2:	9a 81       	ldd	r25, Y+2	; 0x02
    26d4:	8c 34       	cpi	r24, 0x4C	; 76
    26d6:	91 05       	cpc	r25, r1
    26d8:	39 f1       	breq	.+78     	; 0x2728 <RC_Desicion+0x6e>
    26da:	29 81       	ldd	r18, Y+1	; 0x01
    26dc:	3a 81       	ldd	r19, Y+2	; 0x02
    26de:	2d 34       	cpi	r18, 0x4D	; 77
    26e0:	31 05       	cpc	r19, r1
    26e2:	5c f4       	brge	.+22     	; 0x26fa <RC_Desicion+0x40>
    26e4:	89 81       	ldd	r24, Y+1	; 0x01
    26e6:	9a 81       	ldd	r25, Y+2	; 0x02
    26e8:	82 34       	cpi	r24, 0x42	; 66
    26ea:	91 05       	cpc	r25, r1
    26ec:	b9 f0       	breq	.+46     	; 0x271c <RC_Desicion+0x62>
    26ee:	29 81       	ldd	r18, Y+1	; 0x01
    26f0:	3a 81       	ldd	r19, Y+2	; 0x02
    26f2:	26 34       	cpi	r18, 0x46	; 70
    26f4:	31 05       	cpc	r19, r1
    26f6:	61 f0       	breq	.+24     	; 0x2710 <RC_Desicion+0x56>
    26f8:	26 c0       	rjmp	.+76     	; 0x2746 <RC_Desicion+0x8c>
    26fa:	89 81       	ldd	r24, Y+1	; 0x01
    26fc:	9a 81       	ldd	r25, Y+2	; 0x02
    26fe:	82 35       	cpi	r24, 0x52	; 82
    2700:	91 05       	cpc	r25, r1
    2702:	c1 f0       	breq	.+48     	; 0x2734 <RC_Desicion+0x7a>
    2704:	29 81       	ldd	r18, Y+1	; 0x01
    2706:	3a 81       	ldd	r19, Y+2	; 0x02
    2708:	23 35       	cpi	r18, 0x53	; 83
    270a:	31 05       	cpc	r19, r1
    270c:	c9 f0       	breq	.+50     	; 0x2740 <RC_Desicion+0x86>
    270e:	1b c0       	rjmp	.+54     	; 0x2746 <RC_Desicion+0x8c>
	{
	case 'F':

		Move_Forward();
    2710:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <Move_Forward>
		Set_Speed(90);
    2714:	8a e5       	ldi	r24, 0x5A	; 90
    2716:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <Set_Speed>
    271a:	17 c0       	rjmp	.+46     	; 0x274a <RC_Desicion+0x90>
		break;
	case 'B':
		Move_Backward();
    271c:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <Move_Backward>
		Set_Speed(90);
    2720:	8a e5       	ldi	r24, 0x5A	; 90
    2722:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <Set_Speed>
    2726:	11 c0       	rjmp	.+34     	; 0x274a <RC_Desicion+0x90>
		break;
	case 'L':
		Move_Left();
    2728:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <Move_Left>
		Set_Speed(90);
    272c:	8a e5       	ldi	r24, 0x5A	; 90
    272e:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <Set_Speed>
    2732:	0b c0       	rjmp	.+22     	; 0x274a <RC_Desicion+0x90>
		break;
	case 'R':
		Move_Right();
    2734:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <Move_Right>
		Set_Speed(90);
    2738:	8a e5       	ldi	r24, 0x5A	; 90
    273a:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <Set_Speed>
    273e:	05 c0       	rjmp	.+10     	; 0x274a <RC_Desicion+0x90>
		break;
	case 'S':
		stop();
    2740:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <stop>
    2744:	02 c0       	rjmp	.+4      	; 0x274a <RC_Desicion+0x90>
		//Set_Speed(90);
		break;
	default:
		stop();
    2746:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <stop>
		break;
	}
}
    274a:	0f 90       	pop	r0
    274c:	0f 90       	pop	r0
    274e:	cf 91       	pop	r28
    2750:	df 91       	pop	r29
    2752:	08 95       	ret

00002754 <Desicion_Direction>:

void Desicion_Direction()
{
    2754:	df 93       	push	r29
    2756:	cf 93       	push	r28
    2758:	00 d0       	rcall	.+0      	; 0x275a <Desicion_Direction+0x6>
    275a:	cd b7       	in	r28, 0x3d	; 61
    275c:	de b7       	in	r29, 0x3e	; 62
	if (Ultra_Distance > 50)
    275e:	80 91 76 01 	lds	r24, 0x0176
    2762:	83 33       	cpi	r24, 0x33	; 51
    2764:	20 f0       	brcs	.+8      	; 0x276e <Desicion_Direction+0x1a>
	{
		HC5_input = 'F';
    2766:	86 e4       	ldi	r24, 0x46	; 70
    2768:	80 93 75 01 	sts	0x0175, r24
    276c:	39 c0       	rjmp	.+114    	; 0x27e0 <Desicion_Direction+0x8c>
	}
	else
	{
		uint8 Right_val = 0, Left_val = 0;
    276e:	1a 82       	std	Y+2, r1	; 0x02
    2770:	19 82       	std	Y+1, r1	; 0x01

		HC5_input = 'R';
    2772:	82 e5       	ldi	r24, 0x52	; 82
    2774:	80 93 75 01 	sts	0x0175, r24
		ULTRA_Desicion();
    2778:	0e 94 f5 13 	call	0x27ea	; 0x27ea <ULTRA_Desicion>

		Right_val = Ultrasonic_readDistance();
    277c:	0e 94 77 0e 	call	0x1cee	; 0x1cee <Ultrasonic_readDistance>
    2780:	8a 83       	std	Y+2, r24	; 0x02

		HC5_input = 'L';
    2782:	8c e4       	ldi	r24, 0x4C	; 76
    2784:	80 93 75 01 	sts	0x0175, r24
		ULTRA_Desicion();
    2788:	0e 94 f5 13 	call	0x27ea	; 0x27ea <ULTRA_Desicion>
		ULTRA_Desicion();
    278c:	0e 94 f5 13 	call	0x27ea	; 0x27ea <ULTRA_Desicion>

		Left_val = Ultrasonic_readDistance();
    2790:	0e 94 77 0e 	call	0x1cee	; 0x1cee <Ultrasonic_readDistance>
    2794:	89 83       	std	Y+1, r24	; 0x01

		HC5_input = 'R';
    2796:	82 e5       	ldi	r24, 0x52	; 82
    2798:	80 93 75 01 	sts	0x0175, r24
		ULTRA_Desicion();
    279c:	0e 94 f5 13 	call	0x27ea	; 0x27ea <ULTRA_Desicion>

		if (Right_val >= Left_val && Right_val > 50)
    27a0:	9a 81       	ldd	r25, Y+2	; 0x02
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
    27a4:	98 17       	cp	r25, r24
    27a6:	38 f0       	brcs	.+14     	; 0x27b6 <Desicion_Direction+0x62>
    27a8:	8a 81       	ldd	r24, Y+2	; 0x02
    27aa:	83 33       	cpi	r24, 0x33	; 51
    27ac:	20 f0       	brcs	.+8      	; 0x27b6 <Desicion_Direction+0x62>
		{
			HC5_input = 'R';
    27ae:	82 e5       	ldi	r24, 0x52	; 82
    27b0:	80 93 75 01 	sts	0x0175, r24
    27b4:	15 c0       	rjmp	.+42     	; 0x27e0 <Desicion_Direction+0x8c>
		}
		else if (Left_val >= Right_val && Left_val > 50)
    27b6:	99 81       	ldd	r25, Y+1	; 0x01
    27b8:	8a 81       	ldd	r24, Y+2	; 0x02
    27ba:	98 17       	cp	r25, r24
    27bc:	38 f0       	brcs	.+14     	; 0x27cc <Desicion_Direction+0x78>
    27be:	89 81       	ldd	r24, Y+1	; 0x01
    27c0:	83 33       	cpi	r24, 0x33	; 51
    27c2:	20 f0       	brcs	.+8      	; 0x27cc <Desicion_Direction+0x78>
		{
			HC5_input = 'L';
    27c4:	8c e4       	ldi	r24, 0x4C	; 76
    27c6:	80 93 75 01 	sts	0x0175, r24
    27ca:	0a c0       	rjmp	.+20     	; 0x27e0 <Desicion_Direction+0x8c>
		}
		else
		{
			HC5_input = 'R';
    27cc:	82 e5       	ldi	r24, 0x52	; 82
    27ce:	80 93 75 01 	sts	0x0175, r24
			ULTRA_Desicion();
    27d2:	0e 94 f5 13 	call	0x27ea	; 0x27ea <ULTRA_Desicion>
			ULTRA_Desicion();
    27d6:	0e 94 f5 13 	call	0x27ea	; 0x27ea <ULTRA_Desicion>

			HC5_input = 'F';
    27da:	86 e4       	ldi	r24, 0x46	; 70
    27dc:	80 93 75 01 	sts	0x0175, r24
		}

	}
}
    27e0:	0f 90       	pop	r0
    27e2:	0f 90       	pop	r0
    27e4:	cf 91       	pop	r28
    27e6:	df 91       	pop	r29
    27e8:	08 95       	ret

000027ea <ULTRA_Desicion>:

void ULTRA_Desicion()
{
    27ea:	df 93       	push	r29
    27ec:	cf 93       	push	r28
    27ee:	cd b7       	in	r28, 0x3d	; 61
    27f0:	de b7       	in	r29, 0x3e	; 62
    27f2:	6e 97       	sbiw	r28, 0x1e	; 30
    27f4:	0f b6       	in	r0, 0x3f	; 63
    27f6:	f8 94       	cli
    27f8:	de bf       	out	0x3e, r29	; 62
    27fa:	0f be       	out	0x3f, r0	; 63
    27fc:	cd bf       	out	0x3d, r28	; 61

	switch (HC5_input)
    27fe:	80 91 75 01 	lds	r24, 0x0175
    2802:	28 2f       	mov	r18, r24
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	3e 8f       	std	Y+30, r19	; 0x1e
    2808:	2d 8f       	std	Y+29, r18	; 0x1d
    280a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    280c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    280e:	86 34       	cpi	r24, 0x46	; 70
    2810:	91 05       	cpc	r25, r1
    2812:	b9 f0       	breq	.+46     	; 0x2842 <ULTRA_Desicion+0x58>
    2814:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2816:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2818:	27 34       	cpi	r18, 0x47	; 71
    281a:	31 05       	cpc	r19, r1
    281c:	34 f4       	brge	.+12     	; 0x282a <ULTRA_Desicion+0x40>
    281e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2820:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2822:	82 34       	cpi	r24, 0x42	; 66
    2824:	91 05       	cpc	r25, r1
    2826:	81 f0       	breq	.+32     	; 0x2848 <ULTRA_Desicion+0x5e>
    2828:	fc c0       	rjmp	.+504    	; 0x2a22 <ULTRA_Desicion+0x238>
    282a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    282c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    282e:	2c 34       	cpi	r18, 0x4C	; 76
    2830:	31 05       	cpc	r19, r1
    2832:	69 f0       	breq	.+26     	; 0x284e <ULTRA_Desicion+0x64>
    2834:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2836:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2838:	82 35       	cpi	r24, 0x52	; 82
    283a:	91 05       	cpc	r25, r1
    283c:	09 f4       	brne	.+2      	; 0x2840 <ULTRA_Desicion+0x56>
    283e:	7c c0       	rjmp	.+248    	; 0x2938 <ULTRA_Desicion+0x14e>
    2840:	f0 c0       	rjmp	.+480    	; 0x2a22 <ULTRA_Desicion+0x238>
	{
	case 'F':
		Move_Forward();
    2842:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <Move_Forward>
    2846:	ef c0       	rjmp	.+478    	; 0x2a26 <ULTRA_Desicion+0x23c>
		break;
	case 'B':
		Move_Backward();
    2848:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <Move_Backward>
    284c:	ec c0       	rjmp	.+472    	; 0x2a26 <ULTRA_Desicion+0x23c>
		break;
	case 'L':
		Move_Left();
    284e:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <Move_Left>
    2852:	80 e0       	ldi	r24, 0x00	; 0
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	aa ef       	ldi	r26, 0xFA	; 250
    2858:	b3 e4       	ldi	r27, 0x43	; 67
    285a:	89 8f       	std	Y+25, r24	; 0x19
    285c:	9a 8f       	std	Y+26, r25	; 0x1a
    285e:	ab 8f       	std	Y+27, r26	; 0x1b
    2860:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2862:	69 8d       	ldd	r22, Y+25	; 0x19
    2864:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2866:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2868:	9c 8d       	ldd	r25, Y+28	; 0x1c
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	4a ef       	ldi	r20, 0xFA	; 250
    2870:	54 e4       	ldi	r21, 0x44	; 68
    2872:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	8d 8b       	std	Y+21, r24	; 0x15
    287c:	9e 8b       	std	Y+22, r25	; 0x16
    287e:	af 8b       	std	Y+23, r26	; 0x17
    2880:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2882:	6d 89       	ldd	r22, Y+21	; 0x15
    2884:	7e 89       	ldd	r23, Y+22	; 0x16
    2886:	8f 89       	ldd	r24, Y+23	; 0x17
    2888:	98 8d       	ldd	r25, Y+24	; 0x18
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	40 e8       	ldi	r20, 0x80	; 128
    2890:	5f e3       	ldi	r21, 0x3F	; 63
    2892:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2896:	88 23       	and	r24, r24
    2898:	2c f4       	brge	.+10     	; 0x28a4 <ULTRA_Desicion+0xba>
		__ticks = 1;
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	9c 8b       	std	Y+20, r25	; 0x14
    28a0:	8b 8b       	std	Y+19, r24	; 0x13
    28a2:	3f c0       	rjmp	.+126    	; 0x2922 <ULTRA_Desicion+0x138>
	else if (__tmp > 65535)
    28a4:	6d 89       	ldd	r22, Y+21	; 0x15
    28a6:	7e 89       	ldd	r23, Y+22	; 0x16
    28a8:	8f 89       	ldd	r24, Y+23	; 0x17
    28aa:	98 8d       	ldd	r25, Y+24	; 0x18
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	3f ef       	ldi	r19, 0xFF	; 255
    28b0:	4f e7       	ldi	r20, 0x7F	; 127
    28b2:	57 e4       	ldi	r21, 0x47	; 71
    28b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28b8:	18 16       	cp	r1, r24
    28ba:	4c f5       	brge	.+82     	; 0x290e <ULTRA_Desicion+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28bc:	69 8d       	ldd	r22, Y+25	; 0x19
    28be:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28c0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28c2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	40 e2       	ldi	r20, 0x20	; 32
    28ca:	51 e4       	ldi	r21, 0x41	; 65
    28cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d0:	dc 01       	movw	r26, r24
    28d2:	cb 01       	movw	r24, r22
    28d4:	bc 01       	movw	r22, r24
    28d6:	cd 01       	movw	r24, r26
    28d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	9c 8b       	std	Y+20, r25	; 0x14
    28e2:	8b 8b       	std	Y+19, r24	; 0x13
    28e4:	0f c0       	rjmp	.+30     	; 0x2904 <ULTRA_Desicion+0x11a>
    28e6:	88 ec       	ldi	r24, 0xC8	; 200
    28e8:	90 e0       	ldi	r25, 0x00	; 0
    28ea:	9a 8b       	std	Y+18, r25	; 0x12
    28ec:	89 8b       	std	Y+17, r24	; 0x11
    28ee:	89 89       	ldd	r24, Y+17	; 0x11
    28f0:	9a 89       	ldd	r25, Y+18	; 0x12
    28f2:	01 97       	sbiw	r24, 0x01	; 1
    28f4:	f1 f7       	brne	.-4      	; 0x28f2 <ULTRA_Desicion+0x108>
    28f6:	9a 8b       	std	Y+18, r25	; 0x12
    28f8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28fa:	8b 89       	ldd	r24, Y+19	; 0x13
    28fc:	9c 89       	ldd	r25, Y+20	; 0x14
    28fe:	01 97       	sbiw	r24, 0x01	; 1
    2900:	9c 8b       	std	Y+20, r25	; 0x14
    2902:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2904:	8b 89       	ldd	r24, Y+19	; 0x13
    2906:	9c 89       	ldd	r25, Y+20	; 0x14
    2908:	00 97       	sbiw	r24, 0x00	; 0
    290a:	69 f7       	brne	.-38     	; 0x28e6 <ULTRA_Desicion+0xfc>
    290c:	8c c0       	rjmp	.+280    	; 0x2a26 <ULTRA_Desicion+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    290e:	6d 89       	ldd	r22, Y+21	; 0x15
    2910:	7e 89       	ldd	r23, Y+22	; 0x16
    2912:	8f 89       	ldd	r24, Y+23	; 0x17
    2914:	98 8d       	ldd	r25, Y+24	; 0x18
    2916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	9c 8b       	std	Y+20, r25	; 0x14
    2920:	8b 8b       	std	Y+19, r24	; 0x13
    2922:	8b 89       	ldd	r24, Y+19	; 0x13
    2924:	9c 89       	ldd	r25, Y+20	; 0x14
    2926:	98 8b       	std	Y+16, r25	; 0x10
    2928:	8f 87       	std	Y+15, r24	; 0x0f
    292a:	8f 85       	ldd	r24, Y+15	; 0x0f
    292c:	98 89       	ldd	r25, Y+16	; 0x10
    292e:	01 97       	sbiw	r24, 0x01	; 1
    2930:	f1 f7       	brne	.-4      	; 0x292e <ULTRA_Desicion+0x144>
    2932:	98 8b       	std	Y+16, r25	; 0x10
    2934:	8f 87       	std	Y+15, r24	; 0x0f
    2936:	77 c0       	rjmp	.+238    	; 0x2a26 <ULTRA_Desicion+0x23c>
		_delay_ms(500);
		break;
	case 'R':
		Move_Right();
    2938:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <Move_Right>
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	aa ef       	ldi	r26, 0xFA	; 250
    2942:	b3 e4       	ldi	r27, 0x43	; 67
    2944:	8b 87       	std	Y+11, r24	; 0x0b
    2946:	9c 87       	std	Y+12, r25	; 0x0c
    2948:	ad 87       	std	Y+13, r26	; 0x0d
    294a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    294c:	6b 85       	ldd	r22, Y+11	; 0x0b
    294e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2950:	8d 85       	ldd	r24, Y+13	; 0x0d
    2952:	9e 85       	ldd	r25, Y+14	; 0x0e
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	4a ef       	ldi	r20, 0xFA	; 250
    295a:	54 e4       	ldi	r21, 0x44	; 68
    295c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2960:	dc 01       	movw	r26, r24
    2962:	cb 01       	movw	r24, r22
    2964:	8f 83       	std	Y+7, r24	; 0x07
    2966:	98 87       	std	Y+8, r25	; 0x08
    2968:	a9 87       	std	Y+9, r26	; 0x09
    296a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    296c:	6f 81       	ldd	r22, Y+7	; 0x07
    296e:	78 85       	ldd	r23, Y+8	; 0x08
    2970:	89 85       	ldd	r24, Y+9	; 0x09
    2972:	9a 85       	ldd	r25, Y+10	; 0x0a
    2974:	20 e0       	ldi	r18, 0x00	; 0
    2976:	30 e0       	ldi	r19, 0x00	; 0
    2978:	40 e8       	ldi	r20, 0x80	; 128
    297a:	5f e3       	ldi	r21, 0x3F	; 63
    297c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2980:	88 23       	and	r24, r24
    2982:	2c f4       	brge	.+10     	; 0x298e <ULTRA_Desicion+0x1a4>
		__ticks = 1;
    2984:	81 e0       	ldi	r24, 0x01	; 1
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	9e 83       	std	Y+6, r25	; 0x06
    298a:	8d 83       	std	Y+5, r24	; 0x05
    298c:	3f c0       	rjmp	.+126    	; 0x2a0c <ULTRA_Desicion+0x222>
	else if (__tmp > 65535)
    298e:	6f 81       	ldd	r22, Y+7	; 0x07
    2990:	78 85       	ldd	r23, Y+8	; 0x08
    2992:	89 85       	ldd	r24, Y+9	; 0x09
    2994:	9a 85       	ldd	r25, Y+10	; 0x0a
    2996:	20 e0       	ldi	r18, 0x00	; 0
    2998:	3f ef       	ldi	r19, 0xFF	; 255
    299a:	4f e7       	ldi	r20, 0x7F	; 127
    299c:	57 e4       	ldi	r21, 0x47	; 71
    299e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29a2:	18 16       	cp	r1, r24
    29a4:	4c f5       	brge	.+82     	; 0x29f8 <ULTRA_Desicion+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    29a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    29aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    29ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	40 e2       	ldi	r20, 0x20	; 32
    29b4:	51 e4       	ldi	r21, 0x41	; 65
    29b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ba:	dc 01       	movw	r26, r24
    29bc:	cb 01       	movw	r24, r22
    29be:	bc 01       	movw	r22, r24
    29c0:	cd 01       	movw	r24, r26
    29c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c6:	dc 01       	movw	r26, r24
    29c8:	cb 01       	movw	r24, r22
    29ca:	9e 83       	std	Y+6, r25	; 0x06
    29cc:	8d 83       	std	Y+5, r24	; 0x05
    29ce:	0f c0       	rjmp	.+30     	; 0x29ee <ULTRA_Desicion+0x204>
    29d0:	88 ec       	ldi	r24, 0xC8	; 200
    29d2:	90 e0       	ldi	r25, 0x00	; 0
    29d4:	9c 83       	std	Y+4, r25	; 0x04
    29d6:	8b 83       	std	Y+3, r24	; 0x03
    29d8:	8b 81       	ldd	r24, Y+3	; 0x03
    29da:	9c 81       	ldd	r25, Y+4	; 0x04
    29dc:	01 97       	sbiw	r24, 0x01	; 1
    29de:	f1 f7       	brne	.-4      	; 0x29dc <ULTRA_Desicion+0x1f2>
    29e0:	9c 83       	std	Y+4, r25	; 0x04
    29e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29e4:	8d 81       	ldd	r24, Y+5	; 0x05
    29e6:	9e 81       	ldd	r25, Y+6	; 0x06
    29e8:	01 97       	sbiw	r24, 0x01	; 1
    29ea:	9e 83       	std	Y+6, r25	; 0x06
    29ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ee:	8d 81       	ldd	r24, Y+5	; 0x05
    29f0:	9e 81       	ldd	r25, Y+6	; 0x06
    29f2:	00 97       	sbiw	r24, 0x00	; 0
    29f4:	69 f7       	brne	.-38     	; 0x29d0 <ULTRA_Desicion+0x1e6>
    29f6:	17 c0       	rjmp	.+46     	; 0x2a26 <ULTRA_Desicion+0x23c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29f8:	6f 81       	ldd	r22, Y+7	; 0x07
    29fa:	78 85       	ldd	r23, Y+8	; 0x08
    29fc:	89 85       	ldd	r24, Y+9	; 0x09
    29fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	9e 83       	std	Y+6, r25	; 0x06
    2a0a:	8d 83       	std	Y+5, r24	; 0x05
    2a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a10:	9a 83       	std	Y+2, r25	; 0x02
    2a12:	89 83       	std	Y+1, r24	; 0x01
    2a14:	89 81       	ldd	r24, Y+1	; 0x01
    2a16:	9a 81       	ldd	r25, Y+2	; 0x02
    2a18:	01 97       	sbiw	r24, 0x01	; 1
    2a1a:	f1 f7       	brne	.-4      	; 0x2a18 <ULTRA_Desicion+0x22e>
    2a1c:	9a 83       	std	Y+2, r25	; 0x02
    2a1e:	89 83       	std	Y+1, r24	; 0x01
    2a20:	02 c0       	rjmp	.+4      	; 0x2a26 <ULTRA_Desicion+0x23c>
		_delay_ms(500);
		break;
	default:
		stop();
    2a22:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <stop>
		break;
	}

}
    2a26:	6e 96       	adiw	r28, 0x1e	; 30
    2a28:	0f b6       	in	r0, 0x3f	; 63
    2a2a:	f8 94       	cli
    2a2c:	de bf       	out	0x3e, r29	; 62
    2a2e:	0f be       	out	0x3f, r0	; 63
    2a30:	cd bf       	out	0x3d, r28	; 61
    2a32:	cf 91       	pop	r28
    2a34:	df 91       	pop	r29
    2a36:	08 95       	ret

00002a38 <__udivmodhi4>:
    2a38:	aa 1b       	sub	r26, r26
    2a3a:	bb 1b       	sub	r27, r27
    2a3c:	51 e1       	ldi	r21, 0x11	; 17
    2a3e:	07 c0       	rjmp	.+14     	; 0x2a4e <__udivmodhi4_ep>

00002a40 <__udivmodhi4_loop>:
    2a40:	aa 1f       	adc	r26, r26
    2a42:	bb 1f       	adc	r27, r27
    2a44:	a6 17       	cp	r26, r22
    2a46:	b7 07       	cpc	r27, r23
    2a48:	10 f0       	brcs	.+4      	; 0x2a4e <__udivmodhi4_ep>
    2a4a:	a6 1b       	sub	r26, r22
    2a4c:	b7 0b       	sbc	r27, r23

00002a4e <__udivmodhi4_ep>:
    2a4e:	88 1f       	adc	r24, r24
    2a50:	99 1f       	adc	r25, r25
    2a52:	5a 95       	dec	r21
    2a54:	a9 f7       	brne	.-22     	; 0x2a40 <__udivmodhi4_loop>
    2a56:	80 95       	com	r24
    2a58:	90 95       	com	r25
    2a5a:	bc 01       	movw	r22, r24
    2a5c:	cd 01       	movw	r24, r26
    2a5e:	08 95       	ret

00002a60 <__udivmodsi4>:
    2a60:	a1 e2       	ldi	r26, 0x21	; 33
    2a62:	1a 2e       	mov	r1, r26
    2a64:	aa 1b       	sub	r26, r26
    2a66:	bb 1b       	sub	r27, r27
    2a68:	fd 01       	movw	r30, r26
    2a6a:	0d c0       	rjmp	.+26     	; 0x2a86 <__udivmodsi4_ep>

00002a6c <__udivmodsi4_loop>:
    2a6c:	aa 1f       	adc	r26, r26
    2a6e:	bb 1f       	adc	r27, r27
    2a70:	ee 1f       	adc	r30, r30
    2a72:	ff 1f       	adc	r31, r31
    2a74:	a2 17       	cp	r26, r18
    2a76:	b3 07       	cpc	r27, r19
    2a78:	e4 07       	cpc	r30, r20
    2a7a:	f5 07       	cpc	r31, r21
    2a7c:	20 f0       	brcs	.+8      	; 0x2a86 <__udivmodsi4_ep>
    2a7e:	a2 1b       	sub	r26, r18
    2a80:	b3 0b       	sbc	r27, r19
    2a82:	e4 0b       	sbc	r30, r20
    2a84:	f5 0b       	sbc	r31, r21

00002a86 <__udivmodsi4_ep>:
    2a86:	66 1f       	adc	r22, r22
    2a88:	77 1f       	adc	r23, r23
    2a8a:	88 1f       	adc	r24, r24
    2a8c:	99 1f       	adc	r25, r25
    2a8e:	1a 94       	dec	r1
    2a90:	69 f7       	brne	.-38     	; 0x2a6c <__udivmodsi4_loop>
    2a92:	60 95       	com	r22
    2a94:	70 95       	com	r23
    2a96:	80 95       	com	r24
    2a98:	90 95       	com	r25
    2a9a:	9b 01       	movw	r18, r22
    2a9c:	ac 01       	movw	r20, r24
    2a9e:	bd 01       	movw	r22, r26
    2aa0:	cf 01       	movw	r24, r30
    2aa2:	08 95       	ret

00002aa4 <__prologue_saves__>:
    2aa4:	2f 92       	push	r2
    2aa6:	3f 92       	push	r3
    2aa8:	4f 92       	push	r4
    2aaa:	5f 92       	push	r5
    2aac:	6f 92       	push	r6
    2aae:	7f 92       	push	r7
    2ab0:	8f 92       	push	r8
    2ab2:	9f 92       	push	r9
    2ab4:	af 92       	push	r10
    2ab6:	bf 92       	push	r11
    2ab8:	cf 92       	push	r12
    2aba:	df 92       	push	r13
    2abc:	ef 92       	push	r14
    2abe:	ff 92       	push	r15
    2ac0:	0f 93       	push	r16
    2ac2:	1f 93       	push	r17
    2ac4:	cf 93       	push	r28
    2ac6:	df 93       	push	r29
    2ac8:	cd b7       	in	r28, 0x3d	; 61
    2aca:	de b7       	in	r29, 0x3e	; 62
    2acc:	ca 1b       	sub	r28, r26
    2ace:	db 0b       	sbc	r29, r27
    2ad0:	0f b6       	in	r0, 0x3f	; 63
    2ad2:	f8 94       	cli
    2ad4:	de bf       	out	0x3e, r29	; 62
    2ad6:	0f be       	out	0x3f, r0	; 63
    2ad8:	cd bf       	out	0x3d, r28	; 61
    2ada:	09 94       	ijmp

00002adc <__epilogue_restores__>:
    2adc:	2a 88       	ldd	r2, Y+18	; 0x12
    2ade:	39 88       	ldd	r3, Y+17	; 0x11
    2ae0:	48 88       	ldd	r4, Y+16	; 0x10
    2ae2:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ae4:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ae6:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ae8:	8c 84       	ldd	r8, Y+12	; 0x0c
    2aea:	9b 84       	ldd	r9, Y+11	; 0x0b
    2aec:	aa 84       	ldd	r10, Y+10	; 0x0a
    2aee:	b9 84       	ldd	r11, Y+9	; 0x09
    2af0:	c8 84       	ldd	r12, Y+8	; 0x08
    2af2:	df 80       	ldd	r13, Y+7	; 0x07
    2af4:	ee 80       	ldd	r14, Y+6	; 0x06
    2af6:	fd 80       	ldd	r15, Y+5	; 0x05
    2af8:	0c 81       	ldd	r16, Y+4	; 0x04
    2afa:	1b 81       	ldd	r17, Y+3	; 0x03
    2afc:	aa 81       	ldd	r26, Y+2	; 0x02
    2afe:	b9 81       	ldd	r27, Y+1	; 0x01
    2b00:	ce 0f       	add	r28, r30
    2b02:	d1 1d       	adc	r29, r1
    2b04:	0f b6       	in	r0, 0x3f	; 63
    2b06:	f8 94       	cli
    2b08:	de bf       	out	0x3e, r29	; 62
    2b0a:	0f be       	out	0x3f, r0	; 63
    2b0c:	cd bf       	out	0x3d, r28	; 61
    2b0e:	ed 01       	movw	r28, r26
    2b10:	08 95       	ret

00002b12 <_exit>:
    2b12:	f8 94       	cli

00002b14 <__stop_program>:
    2b14:	ff cf       	rjmp	.-2      	; 0x2b14 <__stop_program>
